[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatics for Public Health",
    "section": "",
    "text": "Welcome\nMy dad once dropped some wisdom on me about leaving a legacy. He said there were three key things I should do:\n\nPlant a seed and watch it grow into a beautiful tree.\nGet creative and do something awesome, like writing a book (or anything else you’re passionate about).\nHave some kiddos of your own.\n\nWhen I was a wee little one, I planted a peach seed. Believe it or not, that peach tree is still standing strong in my parents’ backyard.\nOh, and guess what? I ended up having two amazing kids of my own!\nAnd as for the book, this one ticks off that second point on my dad’s legacy list.\nHope you enjoy hearing my story!"
  },
  {
    "objectID": "preface.html#r-syntax",
    "href": "preface.html#r-syntax",
    "title": "Preface",
    "section": "R Syntax",
    "text": "R Syntax\nEntering your statistical analyses and data manipulations using syntax might initially be daunting. However, there are some major advantages of this approach over pointing and clicking. Creating a syntax file to perform your analyses will enable you to:\n\nAutomatically document exactly how you performed an analysis, including exactly which data set was used.\nEasily reproduce an analysis.\nEasily repeat an analysis with minor changes or on a modified data set.\nRun a time-consuming series of analyses while you are away from your computer.\nUse copy and paste to create templates and/or macros to assist with performing repetitive analyses.\nUse your code to unambiguously explain your analysis to someone (such as a statistician).\nPerform your analyses more quickly as typing (once you know what to type) is usually faster than using menus or combo boxes.\nBackup your analysis using a small text file.\n\nInitially, we will use syntax in an interactive fashion. In other words, we will enter a command directly into R, examine the results, and then enter the next command. Later, we will look at storing these commands in a single file that can be run in one action (a script .R file).\nIt is worth noting at the outset that R is case-sensitive. This means that Anova and anova are different commands. Variable names can use both lower and upper case, but AGE, age, and Age are three different variables. To minimise the possibility of confusion, using only lower case for variable names is recommended, although some people capitalise subsequent words (e.g., ChildAge)."
  },
  {
    "objectID": "preface.html#additional-sources-of-information",
    "href": "preface.html#additional-sources-of-information",
    "title": "Preface",
    "section": "Additional sources of information",
    "text": "Additional sources of information\nThe on-line help that comes with R contains a lot of useful information, especially for syntax. If you cannot recall the particular syntax needed, you can use the dialogue boxes and examine the syntax that R includes in the Results Window. There are also many R tutorials on the Internet and some useful books in the Science Library.\nThe Quick-R web page, is a good and brief introduction to R."
  },
  {
    "objectID": "preface.html#installing-r",
    "href": "preface.html#installing-r",
    "title": "Preface",
    "section": "Installing R",
    "text": "Installing R\nA brief introduction to R and visual instructions on how to install it can be found on the following YouTube video.\nThe following instructions are given to install R on your own computer.\n\nNote: Labs assume you have R version 4.0.3 installed.\n\n\nInstructions for Windows\n\nGo to the CRAN webpage (R Core Team 2020).\nSelect Download R for Windows.\nClick on install R for the first time and follow the instructions.\nInstall R as any other program. You don’t need a short cut to R.\nWhen installing, select the 64 bit option (unless your computer is an old 32 bit one).\nDownload and install RStudio Free Desktop version from: RStudio.\n\n\n\nInstructions for Macintosh\n\nGo to the CRAN webpage.\nSelect Download R for (Mac) OS X.\nDownload the last binary version of R.\nFollow the link to download XQuartz.\nDownload and install RStudio Free Desktop version from: RStudio.\nInstall all the packages that you downloaded.\nOpen RStudio and go to Tools &gt; Terminal &gt; New Terminal.\nSelect the tab for Terminal on the left bottom panel of RStudio.\nType: xcode-select --install in the terminal and click the Return or Enter Key.\nClose the terminal.\n\n\n\nInstalling extra packages\nWe need to install extra packages that add additional commands to R (R Core Team 2020), one of them, pubh (Athens 2020) is essential for both PUBH725 and PUBH726. Open RStudio and copy the following commands in the Console panel.\n\nNote: Labs assume you have R version 4.1.1 or later and pubh version 1.2.5 or later.\n\n\ninstall.packages(\"easystats\", repos = \"https://easystats.r-universe.dev\")\n\n\ninstall.packages(c(\"bestglm\", \"bookdown\", \"broom.mixed\", \"epiDisplay\",\n                   \"forecast\", \"ftExtra\", \"GGally\", \"ggeffects\",\n                   \"ggfortify\",  \"ggpubr\", \"ggraph\",  \"ggsci\", \"heatmaply\", \n                   \"import\", \"ISwR\", \"jtools\", \"latex2exp\", \"plotly\", \n                   \"pubh\", \"psych\", \"qqplotr\", \"reshape2\", \"rmarkdown\", \n                   \"rms\", \"rstatix\", \"sjlabelled\", \"sjPlot\", \"sjmisc\", \n                   \"scales\", \"season\", \"sparkline\",  \"tidyverse\", \"vcd\"))"
  },
  {
    "objectID": "preface.html#setting-up-rstudio",
    "href": "preface.html#setting-up-rstudio",
    "title": "Preface",
    "section": "Setting up RStudio",
    "text": "Setting up RStudio\nThe first thing you would like to do, is to organise all your documents on a single directory (folder). For better results, please follow these instructions:\n\nCreate a new directory in your computer, within your Documents directory and name it PUBH725.\nCreate a sub directory within your new directory, PUBH725 and name it data.\nCreate a sub directory within your new directory, PUBH725 and name it figures.\nOpen RStudio and go to File &gt; New Project. Select Existing Directory (see Figure @ref(fig:NewProject)).\nBrowse for the directory PUBH725 in your computer and select Create Project.\n\n\n\n\n\n\nFigure 1: Window for creating a New Project. Select option Existing Directory.\n\n\n\n\nThere are several functions contained on packages; these packages have to be loaded for each new session or script. We are going to learn how to load these packages in the first lab.\n\n\n\n\nAthens, J. (2020), pubh: A Toolbox for Public Health and Epidemiology.\n\n\nR Core Team (2020), R: A language and environment for statistical computing, Vienna, Austria: R Foundation for Statistical Computing."
  },
  {
    "objectID": "intro.html#overview",
    "href": "intro.html#overview",
    "title": "1  Data Manipulation",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nThe first step in data analysis that involves R will be acquiring your data in an appropriate format, either by entering it directly into R, importing it from a spreadsheet or other format, or by opening a pre-existing R data file.\nIn this laboratory, we will look at performing simple data handling in R. The most important part of this lab is to get you familiar with the software.\nOnce you have completed this lab, you should feel comfortable:\n\nCreating variables in R.\nUnderstanding the difference between continuous variables and categorical ones (factors).\nTransforming data (e.g., converting from pounds to kilograms, calculating BMIs from weights and heights, log transformations, etc.).\nExtracting subsets of your data.\nAssigning labels to variables and categories within variables.\nSaving your data.\nUsing R’s help system.\nImporting data in R from an Excel spreadsheet.\nCreating script files.\n\n\n1.2 Summary of New Commands\n\n\n\n\n\n\n\n\n\nCommand\nLibrary\nFunction\n\n\n\n\n%$%\nmagrittr\nExposition pipe operator\n\n\n%&gt;%\nmagrittr\nForward pipe operator\n\n\n%in%\nbase\nValue matching\n\n\nas_tibble\ntibble\nCoerces objects into tibbles\n\n\nc\nbase\nConcatenates values\n\n\ncopy_labels\nsjlabelled\nCopies labels from a data frame\n\n\ncount\ndplyr\nCounts observations by group\n\n\ndata\nbase\nLoads data from R packages\n\n\nfactor\nbase\nDefines factors\n\n\nfilter\ndplyr\nFilters data frames, given conditions\n\n\nfreq_table\nrstatix\nFrequency tables for categorical variables\n\n\nfrq\nsjmisc\nFrequency tables for categorical variables\n\n\nglimpse\ntibble\nDisplays information about a dataset\n\n\nhead\nbase\nFirst rows of a data frame\n\n\nhelp (?)\nbase\nHelp function\n\n\ninstall.packages\nutils\nInstalls packages in the system\n\n\nis.factor\nbase\nEvaluates if a variable is a factor or not\n\n\nlibrary\nbase\nLoads (attaches) functions from a package\n\n\nlength\nbase\nNumber of observations in a variable\n\n\nlevels\nbase\nLevels of categorical variables\n\n\nmutate\ndplyr\nTransforms/generates variables\n\n\nmean\nbase\nCalculates the arithmetic mean\n\n\nmax\nbase\nCalculates maximum value\n\n\nnames\nbase\nColumn names of variables in a data frame\n\n\nnrow\nbase\nNumber of rows (observations) in data frames\n\n\nread_csv\nreadr\nLoads files with csv format/extension\n\n\nread_rds\nreadr\nLoads RDS files\n\n\nrelevel\nbase\nChanges the reference category\n\n\nrep\nbase\nReplicates numbers or characters\n\n\nrm\nbase\nDeletes (removes) objects from the workspace\n\n\nround\nbase\nRounds variables\n\n\nRSiteSearch\nutils\nSearches R functions in the web\n\n\nselect\ndplyr\nSelects variables from a data frame or tibble\n\n\nsetwd\nbase\nSets the working directory (path)\n\n\ntibble\ntibble\nConstructs tibbles\n\n\nvar_labels\nsjlabelled\nAssigns labels to variables\n\n\nView\nutils\nDisplays data frames\n\n\nwhich\nbase\nFinds the positions where the stated conditionals are true\n\n\nwhich.max\nbase\nFinds the position of the maximum value\n\n\nwith\nbase\nEvaluates commands in a defined data frame or tibble\n\n\nwrite_csv\nreadr\nExports files with csv format/extension\n\n\nwrite_rds\nreadr\nWrites RDS files"
  },
  {
    "objectID": "intro.html#rstudio",
    "href": "intro.html#rstudio",
    "title": "1  Data Manipulation",
    "section": "1.3 RStudio",
    "text": "1.3 RStudio\nA typical session on RStudio would look something like Figure 3.1.\n\n\n\n\n\nFigure 1.1: RStudio displaying a typical .Rmd Markdown script file on the top left corner.\n\n\n\n\nRStudio can have up to four panels open (displaying information):\n\nSource panel (top left). This panel shows the script files.\nConsole panel (bottom left). This panel is where you interact with the program to perform an analysis. It shows the path of the current working directory at the top.\nWorkspace panel (top right). You can select what to show in here. In Figure 3.1, it shows information about the workspace, like currently loaded objects (Environment) and the History of our commands.\nDisplay panel (bottom right). You can select what to show in here. In Figure 3.1, it shows Files, the Help files, generated Plots, Packages available on your R installation and the Viewer."
  },
  {
    "objectID": "intro.html#scripts",
    "href": "intro.html#scripts",
    "title": "1  Data Manipulation",
    "section": "1.4 Scripts",
    "text": "1.4 Scripts\nFiles that document our analysis are known as scripts, and they open on the Source panel. The standard script file has a .R extension and can be opened with any text editor.\n\n\n\n\n\nFigure 1.2: Example of a .R script document.\n\n\n\n\nFigure 3.2 displays an example of a script file. These kind of files are intended to be read by R, so any text that is not part of a command, has to be commented. R will interpret anything written after a # (on the same line) as a comment.\nLet’s clarify the first set of lines from the script file, as shown in Figure 3.2.\n\nThe first line is a comment and gives the name of the file, so, it is not needed, but it is good to have.\nThe second line is a comment about the content of the script. It can be a short or long description. The important thing to remember is that once that you start a new line, for example for writing a different paragraph, you would need to include the # symbol at the beginning of each new line.\nThe third line is a comment about the author.\nThe fourth line is a comment about the date.\nThe sixth line sets the working directory. As explained in the preface, this can be done with the menus and it’s not needed when working in R projects.\nLine 7 loads the pubh package.\nLine 9 estimates measures of association of the exposure treat on the outcome fate from the Bernard data set. ## Notebooks\n\nThe disadvantage of .R scripts is that you cannot produce a single document with both the analysis and the results of such analysis. Notebooks, permit us to record text, commands and results (including plots). We will be using Notebooks to document our analysis on both PUBH 725 and PUBH 726.\nWe will start by creating a mock notebook, using the template that comes with the pubh package (Athens 2020). Open RStudio and select File &gt; New File &gt; R Markdown....\n\n\n\n\n\n\nCaution\n\n\n\nFor this paper, I will use the term of Notebooks for R Markdown (.Rmd) documents. Do NOT select File &gt; New File &gt; R Notebook to create the Notebook.\n\n\nA window will pop-up like the one shown in Figure 3.3, select: From Template &gt; PUBH Template.\n\n\n\n\n\nFigure 1.3: Window for creating a new R Markdown file (Notebook).\n\n\n\n\nClick OK or type the Return key. Have a look at the template; we will edit the script later. For the moment, Let’s run the template as it is. To execute the Notebook, you only need to click on the Knit button which can be found in the Source panel. When you click knit (see 1 in Figure 3.4) for the first time, it will ask for a name to save your file. Give a name like Lab1. The result will appear on the Display panel, and two files will be created: Lab1.Rmd is the script, and Lab1.html is the output that you can open with any web browser.\n\n\n\n\n\n\nTip\n\n\n\nWord can also open html files.\n\n\n\n\n\n\n\nFigure 1.4: Source panel for a Notebook. The following parts are highlighted: 1. The Knit button to compile the file. 2. The Insert button to insert R code. 3. The Run button to pass chunks to the console. 4 The Outline and Markup buttons. 5. The desired output of the document. 6. Cog button to access chunk options and buttons for running the chunk.\n\n\n\n\nLet’s create the Notebook for the first laboratory. Change the title to Data management and edit the author field.\nCodes are inserted in sections called chunks or blocks. Go to the end of the script and click on Insert &gt; R (see 2 in Figure 3.4). Your cursor will be, by default, where you can insert your commands. The easiest thing to do is just to copy from the lab book and paste the code in the chunk.\nIn Figure 3.4, the option message = FALSE was added to the first chunk, to hide messages from the output. You can change the options from a chunk by clicking on the Cog button (see 6 in Figure 3.4). Compile the RMardown script by clicking on the Knit button (see 1 in Figure 3.4).\n\n\n\n\n\n\nTip\n\n\n\nFor a quick reference on Markdown, go to Help &gt; Markdown Quick Reference.\n\n\nWhen you Knit the document, it compiles the full document and displays the results on the Display panel. Sometimes, we want to check a particular command. For doing that, you can transfer your command from the script file by clicking on the small green arrow at the right of the code (see 3 and 6 in Figure 3.4). Depending on your preferences, the results will show on the Console panel or directly in your script file.\n\n\n\n\n\n\nWarning\n\n\n\nThe console has no history of what you knit, that means that if you are testing a particular code, on a dataset that has not been loaded yet on the Console panel, you will have an error message. To keep it safe, if you want to work in an interactive way with the Console, run each chunk as you progress and knit only when you want to look at the whole document.\n\n\n\n1.4.1 Accessing help\nWhen you do not know about the specific options or syntax of a particular command, you can access the help files. For example, Let’s say you want to learn more about the mean function. One way is to use the help command is:\n\nhelp(mean)\n\n\n\n\n\n\n\nNote\n\n\n\nThe general syntax for a command in R is: command(object, options); where command is a function available on the current loaded R packages or created for the current session.\n\n\nAs an alternative, we can use the question mark, without any parenthesis as in:\n\n?sd\n\nIt’s important that you get familiar with help files. At the end of each help file, you can see some examples. You can select a particular example and then type Ctrl + Return (Windows) or Command + Return (Macintosh) to transfer the selection to the console.\n\n\n\n\n\n\nWarning\n\n\n\n\nThe help will only look for documentation on functions that are part of the attached packages.\nUse the help command only in the Console panel. DO NOT include help commands as part of your script files.\n\n\n\nWhen we do not know the name of the function, or it may be part of a package that is installed in the computer, but not loaded yet, you can search by using double question marks. For example, Let’s say that you would like to know how to perform diagnostic tests (e.g., sensitivity, specificity, etc.), in that case, you would type (please note the use of quotes):\n\n?? \"diagnostic tests\"\n\nWhen we use ?? the system searches for functions associated with current installed packages. When we need to make a further search on the web, we can use RSiteSearch in the Console panel. For example:\n\nRSiteSearch(\"meta-analysis\")\n\n\nExercise: Find out what the names command does.\nAnswer: Gives the names from an R object. We use this to know the variables contained in a given dataset (data.frame or tibble in R).\n\n\n\n1.4.2 Browsing help\nOther times, you just want to browse the functions of a particular package of interest, to find new commands. For example, go to the Display panel and select the Packages tab. Look for the package pubh and click on it. A help file will open with the description of all functions and data that are part of that package. You can click on any of the listed functions to gather more information. Some packages have also Vignettes which are more helpful as they guide you to the use of the functions contained in the package.\nIn the help file of pubh click on User guides, package vignettes and other documentation. Next, select the first one: Introduction to the pubh package. You do not have to read through that vignette today, but now you know how to access vignettes."
  },
  {
    "objectID": "intro.html#packages",
    "href": "intro.html#packages",
    "title": "1  Data Manipulation",
    "section": "1.5 Packages",
    "text": "1.5 Packages\nWhen you open R, it loads a standard number of packages, each one of them includes a particular set of functions and data. We can extend the number of available functions by loading more packages into the system.\nWhen you start with the template provided by the pubh package, the first chunk loads recommended packages for PUBH 725 and PUBH 726 into the session. When loading a package required packages are also automatically attached.\nIn particular, when loading pubh the following packages are loaded too:\n\nemmeans\nggformula\nmagrittr\nhuxtable\ngtsummary\n\nThe tidyverse loads a collection of packages:\n\ndplyr\nforcats\nggplot2\npurrr\nreadr\nstringr\ntibble\ntidyr\n\nWhen we load package easystats the following packages are loaded:\n\ninsight\nbayestestR\nparameters\nmodelbased\nsee\ndatawizard\neffectsize\ncorrelation\nreport\n\nSometimes, we would like to load more packages either because of a particular function or because we would like to access data from that library. We use the function library to load a package; for example, to load the ISwR package (ISwR stands for Introductory Statistics with R), we type:\n\nlibrary(ISwR)\n\nA list of most of the available R packages can be found at the CRAN web page, under Packages. Libraries associated with Bioinformatics can be found at the Bioconductor web page. Finally, packages organised by topic, can be found here.\nTo install a new package, you can go to the Display panel, and click on Install under the Packages tab.\nAnother option is to type the command in the Console panel. For example, to install the epibasix package we type:\n\ninstall.packages(\"epibasix\")"
  },
  {
    "objectID": "intro.html#objects-in-r",
    "href": "intro.html#objects-in-r",
    "title": "1  Data Manipulation",
    "section": "1.6 Objects in R",
    "text": "1.6 Objects in R\n\n1.6.1 Short-cuts\nThe following are important short-cuts that we can use in RStudio:\n\n\n\nFunction\nOutput\nMacOS Short-cut\nWindows Short-cut\n\n\n\n\nAssignment\n&lt;-\nOption -\nAlt -\n\n\nPipe\n%&gt;%\nShift Command M\nShift Ctl M\n\n\n\n\n\n\n\n\n\n\n\nAction\nMacOS Short-cut\nWindows Short-cut\n\n\n\n\nInsert Chunk\nOption Command I\nAlt Ctl I\n\n\nRun line/selection\nCommand Return\nCtl Return\n\n\nFormats text selection as code\nCommand D\nCtl D\n\n\n\n\n\n1.6.2 Assignments\nAn excellent introduction to R and its objects, can be found in the first chapter of (Dalgaard 2008).\n\n\n\n\n\n\nNote\n\n\n\nFrom now on, copy all the R commands in your script file (your RMarkdown Notebook). Be free to add text to comment or to change options or variables.\n\n\nA variable that holds a number or character is known as a scalar. Assignments are done with &lt;- with no space between the two symbols. Assignments can also be done using the equal = symbol. For example:\n\nx = 5\nx + 3\n\n[1] 8\n\n\nWhen a variable, holds 2 or more numbers or characters, is called a vector. For example, a vector of 3 weights (in pounds) is generated using the command c (concatenate):\n\nweight = c(151.45, 194, 121.25)\n\nThe advantage of vectors is that operations become faster than performing single operations. For example, let’s say that we want to convert the weight in pounds to kg, and we do not want to have another variable, so just replace the old one. One kg equals 2.2046 pounds:\n\nweight = weight/2.2046\nweight\n\n[1] 68.69727 87.99782 54.99864\n\n\nThere is no way we could measure human weight with that accuracy using standard devices, so let’s round the values. First, look at the help file of round. The default is digits = 0 (i.e., no decimals). We are going to keep one decimal. As round has no other option, we can directly type the value of x (our object) and the number of digits. In other occasions, for clarity, we will type things like digits = 1.\n\nround(weight, 1)\n\n[1] 68.7 88.0 55.0\n\n\n\n\n1.6.3 Pipe-work flow\nR is a computer language, thus, functions are performed from the most nested ones, to the less ones. For example, if we want to estimate the mean value of the vector of weights that we created, and report only one digit, we write:\n\nround(mean(weight, na.rm = TRUE), 1)\n\n[1] 70.6\n\n\nWhen we have several parentheses, it’s easy to get lost on the code. One option is to use a pipe-work flow. Package magrittr uses the command %&gt;% to pass information in what is known as pipe-work flow. In this case, commands are simply read from left to right and top to bottom:\n\nweight %&gt;%\n  mean(na.rm = TRUE) %&gt;%\n  round(1)\n\n[1] 70.6\n\n\nTo remove (clear) objects from the workspace, we use rm:\n\nrm(x, weight)"
  },
  {
    "objectID": "intro.html#generating-data",
    "href": "intro.html#generating-data",
    "title": "1  Data Manipulation",
    "section": "1.7 Generating data",
    "text": "1.7 Generating data\nFor small datasets, the easiest thing to do is to generate the data directly in R. We will start by entering some data of our own. This particular dataset describes the levels of uric acid in the bloodstream of twenty subjects aged from 21 to 25. There were five individuals with each combination of Down’s syndrome being present/absent and sex being male/female.\nThe variable uric contains the values for the uric acid, the variable downs contains numerical values for Down’s syndrome (0 = “No”, 1 = “Yes”) and the variable sex contains numerical values representing sex (0 = “Male”, 1 = “Female”).\n\nuric_down = tibble(\n  uric = c(5.84, 6.3, 6.95, 5.92, 7.94, 5.5, 6.08, 5.12, 7.58, 6.78,\n           4.9, 6.95, 6.73, 5.32, 4.81, 4.94, 7.2, 5.22, 4.6, 3.88),\n  downs = c(rep(0, 5), rep(1, 5), rep(0, 5), rep(1, 5)),\n  sex = c(rep(0, 10), rep(1, 10))\n)\n\nWe used the rep (replicate) command for both downs and sex. In the case of downs, it alternates 5 zeros (meaning “No”) and 5 ones (meaning “Yes”). For sex, we are entering the males first (10 of them) and the females later (10 of them).\nThe most common way to work with data sets in R are data.frames. A data frame is a rectangular object in which all components (variables) have the same length. A data frame can have variables of different nature (character, logical, double, etc), but each one of them of a single nature and all of them of the same length. A modern version of data frames are tibbles.\nWe can look at all columns but only the first rows of the data:\n\nuric_down %&gt;% head() \n\n# A tibble: 6 × 3\n   uric downs   sex\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  5.84     0     0\n2  6.3      0     0\n3  6.95     0     0\n4  5.92     0     0\n5  7.94     0     0\n6  5.5      1     0\n\n\n\n1.7.1 Categorical variables: Factors\nWhen we defined the data set uric_down, we used only numbers. Both downs and sex are categorical variables. A categorical variable in R is known as factor. Each factor contains two or more levels or categories.\nTo convert the variable sex from the data set uric_down to a factor we use the command factor indicating the names of the levels for each category in the same order as the corresponding sequence of numbers.\nIn this kind of operation, we need to give information of the variable, the name of the dataset and the actual function with options. One way to accomplish this, would be (please do NOT run):\n\nuric_down$sex = factor(uric_down$sex, labels = c(\"Male\", \"Female\"))\n\nIf you understood the instructions, you did NOT run the previous code! Alas, we need to explain.\nThe name of the variable is sex and the name of the dataset is uric_down. We use the $ symbol to give an address, like saying:\n\nVariable sex lives at uric_down.\n\nWe would need to do something similar to convert downs to a factor.\nWe will use a different approach, one more elegant, modern and posh (just saying!). We will use a pipe-workflow to transform variables.\nPackage magrittr introduced the concept of pipes in R; it’s like passing information between objects and functions. The symbol to pass or pipe the information is %&gt;%.\n\n\n\n\n\n\nCaution\n\n\n\nIn some cases, when a function (usually an old function) does not contain data as part of its arguments, we use %$% instead.\n\n\nFor the conversion to factors, we use the function mutate from the dplyr package.\nLet’s transform downs and sex from numerical (double) to categorical (factor) variables:\n\nuric_down2 = uric_down %&gt;%\n  mutate(\n    downs = factor(downs, labels = c(\"No\", \"Yes\")),\n    sex = factor(sex, labels = c(\"Male\", \"Female\"))\n  ) \n\nuric_down2 %&gt;% head()\n\n# A tibble: 6 × 3\n   uric downs sex  \n  &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;\n1  5.84 No    Male \n2  6.3  No    Male \n3  6.95 No    Male \n4  5.92 No    Male \n5  7.94 No    Male \n6  5.5  Yes   Male \n\n\n\n\n1.7.2 Labels\nWe would also like to display more information than the current variable name, in tables and figures. To accomplish this, we associate labels with variables. We will use var_labels from the sjlabelled package. Notice, that the way we assign labels is similar to the one we used for transformations:\n\nuric_down2 = uric_down2 %&gt;%\n  var_labels(\n    uric = \"Uric acid (mg/dl)\",\n    downs = \"Down's syndrome\",\n    sex = \"Sex\"\n  )\n\nFor small datasets (like our current one) it is easier to make the transformation and the labelling as part of the same pipe-workflow.\nWe had not modified the original data set uric_down, instead, we created a new one uric_down2, so we could go one step at a time. You can remove uric_down2 with:\n\nrm(uric_down2)\n\nTo do both, transformation and labelling in the same pipe-workflow, we type:\n\nuric_down = uric_down %&gt;%\n  mutate(\n    downs = factor(downs, labels = c(\"No\", \"Yes\")),\n    sex = factor(sex, labels = c(\"Male\", \"Female\"))\n  ) %&gt;%\n  var_labels(\n    uric = \"Uric acid (mg/dl)\",\n    downs = \"Down's syndrome\",\n    sex = \"Sex\"\n  )"
  },
  {
    "objectID": "intro.html#saving-r-data-frames",
    "href": "intro.html#saving-r-data-frames",
    "title": "1  Data Manipulation",
    "section": "1.8 Saving R data frames",
    "text": "1.8 Saving R data frames\nThe advantage of saving data frames as R data (.rds) is that R will have access to factors, levels and labels. I will save the data on the subdirectory data.\n\nwrite_rds(uric_down, \"data/uric_down.rds\")\n\nIf you are following instructions, you have everything recorded in your script in case you did something wrong. To show how to import, we will remove all objects associated with the data frame first:\n\nrm(uric_down)\n\nTo load the data, we use read_rds and assign the file to a new object (in this case, a tibble). For simplicity, I use the same name of the file as the name of the new data frame, but you can change that.\n\nuric_down = read_rds(\"data/uric_down.rds\")\nuric_down %&gt;% head()\n\n# A tibble: 6 × 3\n   uric downs sex  \n  &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;\n1  5.84 No    Male \n2  6.3  No    Male \n3  6.95 No    Male \n4  5.92 No    Male \n5  7.94 No    Male \n6  5.5  Yes   Male"
  },
  {
    "objectID": "intro.html#variables-in-data-frames",
    "href": "intro.html#variables-in-data-frames",
    "title": "1  Data Manipulation",
    "section": "1.9 Variables in data frames",
    "text": "1.9 Variables in data frames\nThe uric_down data frame has three variables. R can have more than one data frame loaded on the same session, that feature has the disadvantage that we need to tell R where to find individual variables.\nFor example, uric_down has a vector (variable) named sex. We could have another data frame which also has the variable sex, how do we know which one we are analysing? We have to give information of both the data frame and the vector. One way is by using the $ symbol. The syntax is:\ndata$vector\nFor example:\n\nuric_down$sex\n\n [1] Male   Male   Male   Male   Male   Male   Male   Male   Male   Male  \n[11] Female Female Female Female Female Female Female Female Female Female\nattr(,\"label\")\n[1] Sex\nLevels: Male Female\n\n\nAnother option is to select the variables (columns) we are interested in:\n\nuric_down %&gt;%\n  select(sex, downs) %&gt;%\n  frq()\n\nSex (sex) &lt;categorical&gt; \n# total N=20 valid N=20 mean=1.50 sd=0.51\n\nValue  |  N | Raw % | Valid % | Cum. %\n--------------------------------------\nMale   | 10 |    50 |      50 |     50\nFemale | 10 |    50 |      50 |    100\n&lt;NA&gt;   |  0 |     0 |    &lt;NA&gt; |   &lt;NA&gt;\n\nDown's syndrome (downs) &lt;categorical&gt; \n# total N=20 valid N=20 mean=1.50 sd=0.51\n\nValue |  N | Raw % | Valid % | Cum. %\n-------------------------------------\nNo    | 10 |    50 |      50 |     50\nYes   | 10 |    50 |      50 |    100\n&lt;NA&gt;  |  0 |     0 |    &lt;NA&gt; |   &lt;NA&gt;\n\n\nAn alternative to $ is the function with. The syntax is: with(data, function(x)). For example, if we want to know if sex is a factor we can type:\n\nwith(uric_down, is.factor(sex))\n\n[1] TRUE\n\n\nOr using pipes:\n\nuric_down %$% is.factor(sex)\n\n[1] TRUE\n\n\nThe same command using the $ symbol:\n\nis.factor(uric_down$sex)\n\n[1] TRUE\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe attach command allows to access variables within data frames directly, however, it’s not convenient when you work with more than one data set on the same session.\n\n\nIn the current example, the last command was simpler but in many cases is better to use %&gt;%."
  },
  {
    "objectID": "intro.html#export-and-import-objects",
    "href": "intro.html#export-and-import-objects",
    "title": "1  Data Manipulation",
    "section": "1.10 Export and import objects",
    "text": "1.10 Export and import objects\nTo export a data frame (or other objects) to Excel, we will write .csv files (comma-separated values). In the following code, the file will be saved in the subdirectory data:\n\nwrite_csv(uric_down, \"data/uric_down.csv\")\n\nFor importing data from Excel, remember to:\n\nDon’t use complicated names for the variables, in particular:\n\n\nDon’t start a variable name with a number.\nDon’t leave spaces as part of the name, e.g. don’t use blood pressure. Some alternatives are:\n\nblood_pressure\nbp\nblood.pressure\nBloodPressure\n\n\n\nDon’t use a long, complicated name for the name of your file; it is better to avoid spaces.\nDon’t leave cells blank (without any information). For missing data, we will type NA.\nIt is easier to record only numbers and to add labels on R later, to avoid mistakes on the names (it’s not the same female, Female, or female with a blank space before the f).\nExport your data as comma-separated values (.csv).\n\nLet’s load our data frame:\n\nuric_down = read_csv(\"data/uric_down.csv\", col_types = \"dff\")\nuric_down %&gt;% glimpse()\n\nRows: 20\nColumns: 3\n$ uric  &lt;dbl&gt; 5.84, 6.30, 6.95, 5.92, 7.94, 5.50, 6.08, 5.12, 7.58, 6.78, 4.90…\n$ downs &lt;fct&gt; No, No, No, No, No, Yes, Yes, Yes, Yes, Yes, No, No, No, No, No,…\n$ sex   &lt;fct&gt; Male, Male, Male, Male, Male, Male, Male, Male, Male, Male, Fema…\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIt’s also possible to load .csv files using read.csv.\nWhen we use read.csv the data is loaded as a data frame, whereas when we use read_csv the data is loaded as a tibble.\nFor data frames (using read.csv), variables with characters are transformed directly as factor, hence the command: uric_down = read.csv(\"data/uric_down.csv\") would be enough.\nFor tibbles (using read_csv), variables with characters remain characters unless we declare them as factor. The argument: col_types = \"dff\" indicates that the first variable is a double and the next two are factors.\n\nAnother way to import datasets is by going to the Environment tab, under the Workspace panel. There you can go to Import Dataset &gt; From CSV....\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe following strategy is recommended:\n\nLoad all your data in an Excel spreadsheet, remembering all points mentioned earlier.\nSave your data in Excel format and also export it as a .csv file.\nImport your data in R.\nDefine factors and labels.\nOnce you are happy with your data, save it as a .rds file with write_rds.\nPerform your analysis with your data and document everything on a script file."
  },
  {
    "objectID": "intro.html#data-manipulation",
    "href": "intro.html#data-manipulation",
    "title": "1  Data Manipulation",
    "section": "1.11 Data manipulation",
    "text": "1.11 Data manipulation\nIn most cases you start by inspecting your data, cleaning, defining factors and making transformations. As mentioned in the section before, your data will come from a spreadsheet. In this paper, we will use data contained in R packages most of the time.\nFirst read the help file for the dataset wcgs by typing: ?epitools::wcgs in the Console panel.\nWe use the function data to load data from R packages.\n\ndata(wcgs, package = \"epitools\")\nnames(wcgs)\n\n [1] \"id\"      \"age0\"    \"height0\" \"weight0\" \"sbp0\"    \"dbp0\"    \"chol0\"  \n [8] \"behpat0\" \"ncigs0\"  \"dibpat0\" \"chd69\"   \"typechd\" \"time169\" \"arcus0\" \n\n\nThe first thing I would like to do is to change the name of the variables:\n\nwcgs = as_tibble(wcgs)\nnames(wcgs) = c(\n  \"id\", \"age\", \"height\", \"weight\", \"sbp\", \"dbp\",\n  \"chol\", \"beh_pat\", \"ncigs\", \"dib_pat\", \"chd\",\n  \"type_chd\", \"time\", \"arcus\"\n  )\n\nwcgs %&gt;% names()\n\n [1] \"id\"       \"age\"      \"height\"   \"weight\"   \"sbp\"      \"dbp\"     \n [7] \"chol\"     \"beh_pat\"  \"ncigs\"    \"dib_pat\"  \"chd\"      \"type_chd\"\n[13] \"time\"     \"arcus\"   \n\n\n\n1.11.1 Defining factors\nNow, we define categorical variables as factors. By default, the value zero is our reference.\n\nwcgs = wcgs %&gt;%\n  mutate(\n    chd = factor(chd, labels = c(\"No CHD\", \"CHD\")),\n    arcus = factor(arcus, labels = c(\"Absent\", \"Present\")),\n    beh_pat = factor(beh_pat, labels = c(\"A1\", \"A2\", \"B3\", \"B4\")),\n    dib_pat = factor(dib_pat, labels = c(\"B\", \"A\")),\n    type_chd = factor(type_chd, labels = c(\"No CHD\", \"MI or SD\", \"Angina\", \"Silent MI\"))\n  )\n\n\n\n1.11.2 Transforming to a binary variable\nOne of our variables is a count and stores the number of smoked cigarettes/day. We can define a new variable Smoker in which, everyone who smokes one or more cigarette/day will be a smoker. One of the easiest ways to create binary variables is to use a conditional statement. For example, the result of wcgs$ncigs &gt; 0 is a vector with TRUE and FALSE results.\n\nwcgs = wcgs %&gt;%\n  mutate(\n    smoker = factor(ncigs &gt; 0, labels=c(\"Non-Smoker\", \"Smoker\"))\n  )\n\n\n\n1.11.3 Simple numeric transformations\nWe also, prefer units in the metric system. We will convert from inches to centimetres and from pounds to kg.\n\nwcgs = wcgs %&gt;%\n  mutate(\n    height = height * 2.54,\n    weight = weight * 0.4536\n  )\n\n\n\n1.11.4 Changing the reference for factors\nFirst, check the reference level for the variable dib_pat:\n\nlevels(wcgs$dib_pat)\n\n[1] \"B\" \"A\"\n\n\nIt would make more sense to have A as our reference category.\n\nwcgs = wcgs %&gt;%\n  mutate(dib_pat = relevel(dib_pat, ref = \"A\"))\n\n\n\n1.11.5 Labels\nIt is also helpful to add labels to variables.\n\nwcgs = wcgs %&gt;%\n  var_labels(\n    age =  \"Age (years)\",\n    height = \"Height (cm)\",\n    weight = \"Weight (kg)\",\n    sbp = \"SBP (mm Hg)\",\n    dbp = \"DBP (mm Hg)\",\n    chol = \"Cholesterol (mg/dl)\",\n    beh_pat = \"Behaviour pattern\",\n    ncigs = \"Cigarettes (n/day)\",\n    dib_pat = \"Dichotomous behaviour\",\n    chd = \"Coronary Heart Disease\",\n    type_chd = \"Type of CHD\",\n    time = \"Follow up time (days)\",\n    arcus = \"Corneal arcus\",\n    smoker = \"Smoking status\"\n  )\n\n\nExercise: Take a glimpse of your new data frame and save it as wcgs.rds file for further use.\n\n\nwcgs %&gt;% glimpse()\n\nRows: 3,154\nColumns: 15\n$ id       &lt;int&gt; 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2…\n$ age      &lt;int&gt; 49, 42, 42, 41, 59, 44, 44, 40, 43, 42, 53, 41, 50, 43, 44, 5…\n$ height   &lt;dbl&gt; 185.42, 177.80, 175.26, 172.72, 177.80, 182.88, 182.88, 180.3…\n$ weight   &lt;dbl&gt; 68.0400, 72.5760, 72.5760, 68.9472, 68.0400, 92.5344, 74.3904…\n$ sbp      &lt;int&gt; 110, 154, 110, 124, 144, 150, 130, 138, 146, 132, 146, 138, 1…\n$ dbp      &lt;int&gt; 76, 84, 78, 78, 86, 90, 84, 60, 76, 90, 94, 96, 90, 80, 80, 8…\n$ chol     &lt;int&gt; 225, 177, 181, 132, 255, 182, 155, 140, 149, 325, 223, 271, 2…\n$ beh_pat  &lt;fct&gt; A2, A2, B3, B4, B3, B4, B4, A2, B3, A2, A2, A2, A1, B3, B3, B…\n$ ncigs    &lt;int&gt; 25, 20, 0, 20, 20, 0, 0, 0, 25, 0, 25, 20, 50, 30, 0, 3, 9, 0…\n$ dib_pat  &lt;fct&gt; A, A, B, B, B, B, B, A, B, A, A, A, A, B, B, B, B, A, B, A, A…\n$ chd      &lt;fct&gt; No CHD, No CHD, No CHD, No CHD, CHD, No CHD, No CHD, No CHD, …\n$ type_chd &lt;fct&gt; No CHD, No CHD, No CHD, No CHD, MI or SD, No CHD, No CHD, No …\n$ time     &lt;int&gt; 1664, 3071, 3071, 3064, 1885, 3102, 3074, 3071, 3064, 1032, 3…\n$ arcus    &lt;fct&gt; Absent, Present, Absent, Absent, Present, Absent, Absent, Abs…\n$ smoker   &lt;fct&gt; Smoker, Smoker, Non-Smoker, Smoker, Smoker, Non-Smoker, Non-S…\n\nwrite_rds(wcgs, \"data/wcgs.rds\")\n\n\n\n1.11.6 Indexing and subsets\nLet’s said that we are only interested in subjects who are smokers. If that is the case, we can create a new data frame:\n\nsmokers = wcgs %&gt;%\n  filter(smoker == \"Smoker\") %&gt;%\n  copy_labels(wcgs)\n\n\n\n\n\n\n\nNote\n\n\n\nWhen we are making comparisons, we use double equals; single equals in R are used for assignments and double ones for comparisons. For comparing against a character, we have to use single or double quotes (as shown in code above); numbers are not quoted.\n\n\nOne way to check that we did not make a terrible mistake, is to check for the number of observations. The number of observations on a data frame is, most of the time, equal to the number of rows (nrow):\n\nwcgs %&gt;% nrow()\n\n[1] 3154\n\nsmokers %&gt;% nrow()\n\n[1] 1502\n\n\nThe function nrow works on arrays, i.e., data frames and matrices. For vectors, we use the function length instead. For example:\n\nlength(wcgs$smoker)\n\n[1] 3154\n\n\nAnother important concept is that of indexing. For indexing, we write the conditional inside square brackets. For example, another way to look at the number of smokers:\n\nlength(wcgs$smoker[wcgs$smoker == \"Smoker\"])\n\n[1] 1502\n\n\nUsing with:\n\nwith(wcgs, length(smoker[smoker == \"Smoker\"]))\n\n[1] 1502\n\n\nUsing a pipe-workflow:\n\nwcgs %&gt;% count(smoker)\n\n# A tibble: 2 × 2\n  smoker         n\n  &lt;fct&gt;      &lt;int&gt;\n1 Non-Smoker  1652\n2 Smoker      1502\n\n\n\nwcgs %&gt;% frq(smoker) \n\nSmoking status (smoker) &lt;categorical&gt; \n# total N=3154 valid N=3154 mean=1.48 sd=0.50\n\nValue      |    N | Raw % | Valid % | Cum. %\n--------------------------------------------\nNon-Smoker | 1652 | 52.38 |   52.38 |  52.38\nSmoker     | 1502 | 47.62 |   47.62 | 100.00\n&lt;NA&gt;       |    0 |  0.00 |    &lt;NA&gt; |   &lt;NA&gt;\n\n\n\nwcgs %&gt;% freq_table(smoker)\n\n# A tibble: 2 × 3\n  smoker         n  prop\n  &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n1 Non-Smoker  1652  52.4\n2 Smoker      1502  47.6\n\n\nSuppose we want to know the number of smokers who weight 100 kg or more:\n\nwcgs %&gt;%\n  filter(weight &gt;= 100) %&gt;%\n  count(smoker)\n\n# A tibble: 2 × 2\n  smoker         n\n  &lt;fct&gt;      &lt;int&gt;\n1 Non-Smoker    28\n2 Smoker        20\n\n\n\nsmokers %&gt;%\n  filter(weight &gt;= 100) %&gt;%\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    20\n\n\nFor obtaining the same result, but working on the original dataset, we would need to use two conditionals. We use the symbol & for AND and the symbol | for OR.\n\nwcgs %&gt;%\n  filter(weight &gt;= 100 & smoker == \"Smoker\") %&gt;%\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    20\n\n\n\nExercise: Determine the number of smokers who have behavioural pattern A2 and had either angina or silent myocardial infarction. You will need to write the OR conditionals between parenthesis.\n\n\nsmokers %&gt;%\n  filter(beh_pat == \"A2\" & (type_chd == \"Angina\" | type_chd == \"Silent MI\")) %&gt;%\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    38\n\n\nIt’s possible to answer the exercise using %in% which is a variant of the match command:\n\nsmokers %&gt;%\n  filter(beh_pat == \"A2\" & type_chd %in% c(\"Angina\", \"Silent MI\")) %&gt;%\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    38\n\n\nLet’s say we want to know all the variable values for the subject who has the maximum weight. The function which gives us the position for where the given condition is true. I will assign the result to a variable named pos.\n\npos = wcgs %$% which(weight == max(weight))\npos\n\n[1] 1094\n\n\nAlternatively, we can use which.max:\n\nwcgs %$% which.max(weight)\n\n[1] 1094\n\n\nFor indexing arrays, we use square brackets. The first number refers to the row and the second to the column. If one of them is missing, that means we are asking for all the values.\n\nwcgs[pos, ]\n\n# A tibble: 1 × 15\n     id   age height weight   sbp   dbp  chol beh_pat ncigs dib_pat chd  \n  &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt;   &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;\n1 10078    43   193.   145.   166   102   188 B3          0 B       CHD  \n# ℹ 4 more variables: type_chd &lt;fct&gt;, time &lt;int&gt;, arcus &lt;fct&gt;, smoker &lt;fct&gt;\n\n\n\nwcgs %&gt;% \n  filter(id == id[pos])\n\n# A tibble: 1 × 15\n     id   age height weight   sbp   dbp  chol beh_pat ncigs dib_pat chd  \n  &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt;   &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;\n1 10078    43   193.   145.   166   102   188 B3          0 B       CHD  \n# ℹ 4 more variables: type_chd &lt;fct&gt;, time &lt;int&gt;, arcus &lt;fct&gt;, smoker &lt;fct&gt;\n\n\n\n\n\n\nAthens, J. (2020), pubh: A Toolbox for Public Health and Epidemiology.\n\n\nDalgaard, P. (2008), Introductory statistics with r, Springer."
  },
  {
    "objectID": "descriptives.html#overview",
    "href": "descriptives.html#overview",
    "title": "2  Descriptive Statistics",
    "section": "2.1 Overview",
    "text": "2.1 Overview\nIn this laboratory, we will look at performing descriptive statistics and tabular analysis. We will learn to make quality tables and how to export them for publication.\nOnce you have completed this lab, you should feel comfortable:\n\nObtaining basic descriptive statistics for categorical variables (factors).\nObtaining basic descriptive statistics for continuous variables.\nMaking tables of descriptive statistics.\nExporting tables and inserting them into other applications.\n\n\nSummary of New Commands\n\n\n\n\n\n\n\n\n\nCommand\nLibrary\nFunction\n\n\n\n\nas_hux\nhuxtable\nConverts a objects into a hux tables\n\n\nadd_footnote\nhuxtable\nAdds a footnote to a hux table\n\n\ncosm_sum\npubh\nCosmetics for tbl_summary\n\n\ncross_tbl\npubh\nTabulates contingency tables\n\n\ndescr\nsjmisc\nDescriptive statistics of continuous variables\n\n\nestat\npubh\nDescriptive statistics of continuous variables\n\n\nfreq_cont\npubh\nFrequency tables of continuous variables\n\n\ngroup_by\ndplyr\nGroup by one or more variables\n\n\ninsert_row\nhuxtable\nAdds rows on top of hux tables\n\n\nmedian\nbase\nMedian\n\n\nn\ndplyr\nNumber of observations\n\n\nrec\nsjmisc\nRecode variables\n\n\nrel_dis\npubh\nCoefficient of variation\n\n\nsd\nbase\nStandard deviation\n\n\nseq\nbase\nCreates a vector of regular sequences\n\n\nsummarise\ndplyr\nSummarise continuous variables by given statistics\n\n\nsummary\nbase\nSummary of objects\n\n\ntbl_summary\ngtsummary\nConstructs tables of descriptive statistics\n\n\ntbl_strata\ngtsummary\nConstructs tables of descriptive statistics stratified by 2 categorical variables\n\n\ntheme_pubh\npubh\nTheme for hux tables"
  },
  {
    "objectID": "descriptives.html#introduction",
    "href": "descriptives.html#introduction",
    "title": "2  Descriptive Statistics",
    "section": "2.2 Introduction",
    "text": "2.2 Introduction\nFor understanding descriptive statistics, first we should be able to distinguish between:\n\nBig and small datasets. For our paper, we will consider a large data set if the number of observations is greater or equal than 100. We will define a small dataset if the number of observations is less or equal than 30.\nNumerical and categorical variables.\nContinuous and discrete variables.\nContinuous variables with a Normal distribution (or close enough) and those not normally distributed.\n\n\n\n\n\n\n\nNote\n\n\n\nWe will use two datasets: wcgs as an example of a large dataset and kfm as an example of a small dataset.\n\n\nLoad the wcgs.rds dataset that we created in the previous lab.\n\nwcgs = read_rds('data/wcgs.rds')\n\nWe will also use the kfm dataset from the ISwR package; the data records information about infants weighed before and after breast feeding. For more information, you can look at the corresponding help file. First, we load the data.\n\ndata(kfm, package = \"ISwR\")\nkfm = kfm %&gt;% as_tibble()\n\nkfm %&gt;% head()\n\n# A tibble: 6 × 7\n     no dl.milk sex   weight ml.suppl mat.weight mat.height\n  &lt;int&gt;   &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt;    &lt;int&gt;      &lt;int&gt;      &lt;int&gt;\n1     1    8.42 boy     5.00      250         65        173\n2     4    8.44 boy     5.13        0         48        158\n3     5    8.41 boy     5.44       40         62        160\n4    10    9.65 boy     5.11       60         55        162\n5    12    6.44 boy     5.20      240         58        170\n6    16    6.29 boy     5.53        0         56        153\n\n\nVariable sex is categorical, a factor with two levels or categories, let’s take a look at them:\n\nkfm %$% levels(sex)\n\n[1] \"boy\"  \"girl\"\n\n\nI would like the levels of sex to have the first letter in capitals (this is optional). There are different ways of changing names of levels in a factor, one of them is to simply provide a vector of characters with the new names, in the same order as they appear in the levels of the variable. A second option is to use rec. In rec we provide new values in a list, so the order does not really matter.\n\nkfm = kfm %&gt;%\n  mutate(\n    sex = rec(sex, rec = \"girl=Girl; boy=Boy\")\n  )\n\nkfm %$% levels(sex)\n\n[1] \"Boy\"  \"Girl\"\n\n\nWe add labels to kfm and save it in our directory.\n\nkfm = kfm %&gt;%\n  var_labels(\n     dl.milk = 'Breast-milk intake (dl/day)',\n     sex = 'Sex',\n     weight = 'Child weight (kg)',\n     ml.suppl = 'Milk substitute (ml/day)',\n     mat.weight = 'Maternal weight (kg)',\n     mat.height = 'Maternal height (cm)'\n     )\n\n\nwrite_rds(kfm, \"data/kfm.rds\")"
  },
  {
    "objectID": "descriptives.html#categorical-variables",
    "href": "descriptives.html#categorical-variables",
    "title": "2  Descriptive Statistics",
    "section": "2.3 Categorical variables",
    "text": "2.3 Categorical variables\nFor categorical variables (including ordinal variables), we want to know and report the number of observations on each category. We can use freq_table from the rstatix package.\n\nwcgs %&gt;% freq_table(arcus)\n\n# A tibble: 2 × 3\n  arcus       n  prop\n  &lt;fct&gt;   &lt;int&gt; &lt;dbl&gt;\n1 Absent   2211  70.1\n2 Present   941  29.9\n\n\n\nwcgs %&gt;% freq_table(arcus, na.rm = FALSE)\n\n# A tibble: 3 × 3\n  arcus       n  prop\n  &lt;fct&gt;   &lt;int&gt; &lt;dbl&gt;\n1 Absent   2211  70.1\n2 Present   941  29.8\n3 &lt;NA&gt;        2   0.1\n\n\n\n2.3.1 Epidemiology tables\nIn epidemiology, it is frequent to have two by two (2 \\(\\times\\) 2) tables. In those cases, the outcome is binary (e.g., disease: present/absent) and the exposure is binary too. Sometimes, it is also desirable to have \\(n \\times\\) 2 tables in which we are comparing more than two groups about a particular binary outcome. For PUBH 725 and PUBH 726, we will display the exposure of interest in the columns so the percentages for each categorical variable represent prevalences.\n\nwcgs %&gt;%\n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  select(dib_pat, chd) %&gt;% \n  cross_tbl(by = \"dib_pat\") %&gt;%\n  theme_pubh(2) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.1: Distribution of coronary heart disease events (CHD) by behaviour pattern.\n\n\n\nDichotomous behaviour\n\n\n\n\nA, N = 1,589\nB, N = 1,565\nOverall, N = 3,154\n\n\nCoronary Heart Disease\n\n\n\n\n\nCHD\n178 (11%)\n79 (5.0%)\n257 (8.1%)\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIn the previous code, we changed the reference for our outcome as it is standard to report first cases/treatment and then controls.\nWith mutate we are generating new variables, which happen to have the same names as the old variables, thus we replace them. By doing that, as they are new, they are no longer labelled. To preserve the labels, we use copy_labels.\nAs we did not assign the changes to a new data frame, the changes we made were not stored and their impact would be only in the code we provided. Why is this important? Because if we perform inferential statistics, we want for controls to still be the reference.\nFormal tables, as those used for reports, should be self-explained, formatted, include units, use good labels, be numbered and include a caption/legend.\n\nThe first line in the code block, is hidden on reports, I used it for the label: #| label: tbl-tab1\nThe second line in the code block, is hidden on reports, I used it for the caption: #| tbl-cap: \"Distribution of coronary heart disease events (CHD) by behaviour pattern.\"\nWe can add more information in footnotes with add_footnote. In the current example, the size of the font is smaller (9 pt).\n\nTo reference the table in the text we type @label in our Markdown script, where label is the name of the chunk were we construct the table which starts with tbl-. In our current example, to refer to our first table, we would type: @tbl-tab1.\n\n\n\nBy default, cross_tbl uses the label of the outcome as the name of the first column. When you knit to Word, the table is exported and you can edit it there, add captions, etc. Package huxtable allows us to add rows, caption, footnotes, etc.\n\nExercise: Generate a table for the relationship between behavioural pattern (beh_pat) and the presence of CHD (chd) from the WCGS dataset. Remember to display the exposure of interest in columns, so percentages represent prevalence.\n\n\nwcgs %&gt;%\n  mutate(\n    chd = relevel(chd, ref = \"CHD\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  select(beh_pat, chd) %&gt;% \n  cross_tbl(by = \"beh_pat\") %&gt;%\n  theme_pubh(2) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.2: Distribution of behavioural pattern by coronary heart disease (CHD) event.\n\n\n\nBehaviour pattern\n\n\n\n\nA1, N = 264\nA2, N = 1,325\nB3, N = 1,216\nB4, N = 349\nOverall, N = 3,154\n\n\nCoronary Heart Disease\n\n\n\n\n\n\n\nCHD\n30 (11%)\n148 (11%)\n61 (5.0%)\n18 (5.2%)\n257 (8.1%)\n\n\nNo CHD\n234 (89%)\n1,177 (89%)\n1,155 (95%)\n331 (95%)\n2,897 (92%)\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\nQuestion: What is your main observation from the distribution of cases?\nAnswer: The prevalence of CHD in males in the A groups (~ 11%) is about the double than the prevalence in males in the B groups (~ 5%). The prevalence of CHD in the population is 8.1%.\n\n\n\n2.3.2 Double stratification\nThere are cases when we want to present distribution of categorical variables by a exposure of interest and stratified by another categorical variable (e.g. confounder) of interest.\nThe following code shows how to generate this kind of tables.\n\nwcgs %&gt;% \n  select(chd, smoker, dib_pat) %&gt;% \n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n    smoker = relevel(smoker, ref = \"Smoker\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  tbl_strata(\n    strata = smoker,\n    .tbl_fun = ~ .x %&gt;%\n      tbl_summary(by = dib_pat, missing = \"no\")\n  ) %&gt;% \n  cosm_sum() %&gt;% theme_pubh(2) %&gt;% \n  set_align(1, everywhere, \"center\") %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.3: Distribution of coronary heart disease events (CHD) by behaviour pattern and smoking status.\n\n\n\nSmoker\nNon-Smoker\n\n\nVariable\nA, N = 805\nB, N = 697\nA, N = 784\nB, N = 868\n\n\nCoronary Heart Disease\n\n\n\n\n\n\nCHD\n108 (13%)\n51 (7.3%)\n70 (8.9%)\n28 (3.2%)\n\n\nNo CHD\n697 (87%)\n646 (93%)\n714 (91%)\n840 (97%)\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe construct the table with tbl_strata from gtsummary.\ntbl_summary is the function behind cross_tbl.\nThe argument missing = \"no\" is used to not shown missing values.\nWith cosm_sum we add cosmetics to the table and converts it to a huxtable."
  },
  {
    "objectID": "descriptives.html#continuous-variables",
    "href": "descriptives.html#continuous-variables",
    "title": "2  Descriptive Statistics",
    "section": "2.4 Continuous variables",
    "text": "2.4 Continuous variables\nFor continuous variables, we want to report a measure of central tendency and a measure of dispersion. To inspect a continuous variable, we would like to know more than only two statistics. For those purposes, we summarise the data. The function summary is a very basic function that displays a summary of statistics for variables, or information about statistical models (we will look at this capability in PUBH 726).\nThere are several options to look at descriptive statistics of continuous variables. We will compare the following options:\n\ndescr from sjmisc\nestat from pubh\nsummarise from dplyr\n\nFunction descr has the advantage of including variable labels. It can be used to report the descriptive statistics of more than one variable. By default, it shows all the following columns:\n\n\n\nColumn name\nDescription\n\n\n\n\ntype\nType of variable\n\n\nlabel\nLabel of variable\n\n\nn\nNumber of non-missing (valid) observations\n\n\nNA.prc\nMissing percentage\n\n\nmean\nArithmetic mean\n\n\nsd\nStandard deviation\n\n\nmd\nMedian\n\n\ntrimmed\nTrimmed mean\n\n\nrange\nRange\n\n\nskew\nSkewness\n\n\n\nFor example, the descriptive statistics of blood cholesterol:\n\ntab4 = wcgs %&gt;%\n  descr(chol) %&gt;%\n  select(label, n, mean, sd, md, range, skew)\n\nnames(tab4) = c(\"\", \"N\", \"Mean\", \"SD\", \"Median\",\n                \"Range\", \"Skewness\")\n\ntab4 %&gt;%\n  as_hux() %&gt;% theme_pubh() %&gt;% set_width(0.9) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.4: Descriptive statistics of blood cholesterol.\n\n\n\nN\nMean\nSD\nMedian\nRange\nSkewness\n\n\nCholesterol (mg/dl)\n3142\n226.37\n43.42\n223.00\n542 (103-645)\n0.68\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nFirst, we assign the table to a new object, tab4, so we can edit the name of the columns.\nNext, we generate a hux table.\nThere are different themes available for huxtables. Be consistent and use the same theme for all your tables.\nThe theme theme_pubh draws horizontal lines bellow a particular row. The argument is a scalar or a vector which define the rows on which one wants to draw an under line, which in this example, is row one.\n\n\n\nThe descriptive statistics of all continuous variables in wcgs:\n\ntab5 = wcgs %&gt;%\n  descr(age, height, weight, sbp, dbp, chol) %&gt;%\n  select(label, n, mean, sd, md, range, skew)\n\nnames(tab5) = c(\"Variable\", \"N\", \"Mean\", \"SD\", \"Median\",\n                \"Range\", \"Skewness\")\n\ntab5 %&gt;%\n  as_hux() %&gt;% theme_blue() %&gt;%\n  set_width(0.9) %&gt;% set_all_padding(3) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\nDescriptive statistics of continuous variables. \n\n\nVariable\nN\nMean\nSD\nMedian\nRange\nSkewness\n\n\nAge (years)\n3154\n46.28\n5.52\n45.00\n20 (39-59)\n0.53\n\n\nHeight (cm)\n3154\n177.24\n6.42\n177.80\n45.72 (152.4-198.12)\n-0.20\n\n\nWeight (kg)\n3154\n77.09\n9.57\n77.11\n109.77 (35.38-145.15)\n0.60\n\n\nSBP (mm Hg)\n3154\n128.63\n15.12\n126.00\n132 (98-230)\n1.20\n\n\nDBP (mm Hg)\n3154\n82.02\n9.73\n80.00\n92 (58-150)\n0.93\n\n\nCholesterol (mg/dl)\n3142\n226.37\n43.42\n223.00\n542 (103-645)\n0.68\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor illustration purposes, I used theme_blue.\nBe consistent and use the same theme for all your tables.\nThe command set_all_padding is useful to change the space between the rows (padding).\n\n\n\nThe function estat from the pubh package displays all the statistics that we are interested to calculate from continuous variables.\n\nwcgs %&gt;% \n  estat(~ chol) %&gt;%\n  as_hux() %&gt;% theme_pubh() %&gt;% set_width(0.8) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.5: Descriptive statistics of blood cholesterol.\n\n\n\nN\nMin.\nMax.\nMean\nMedian\nSD\nCV\n\n\nCholesterol (mg/dl)\n3142.00\n103.00\n645.00\n226.37\n223.00\n43.42\n0.19\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\nIn estat N is the number of observations, Min. is the minimum value, Max. is the maximum value, SD is the standard deviation and CV is the coefficient of variation or relative dispersion, defined as:\n\\[CV = \\frac{SD}{Mean}\\]\nFinally, we can also decide which statistics we want to report using summarise.\n\n\n\n\n\n\nTip\n\n\n\nRead the help file of summarise to know more about available functions.\n\n\n\nwcgs %&gt;%\n  summarise(\n    N = n(),\n    Mean = mean(chol, na.rm = TRUE),\n    SD = sd(chol, na.rm = TRUE),\n    Median = median(chol, na.rm = TRUE),\n    CV = rel_dis(chol)\n  )\n\n# A tibble: 1 × 5\n      N  Mean    SD Median    CV\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1  3154  226.  43.4    223 0.192\n\n\n\n2.4.1 Understanding dispersion\nWe will use the relative dispersion to gather information about the variability in our variable of interest. When we multiply the CV by 100, we have it as a percentage. Values of CV &lt; 10% indicate relatively small variability, which is better for further analysis. Values of CV &gt; 33% are of concern. We will consider variables with CV &gt; 30% having high variability and not normally distributed.\nIn the normal distribution, about three standard deviations to the right and the left, include 99% of the population. If we had a physiological variable with a CV = 40%, some of the observations would be negative, and that would not be possible unless the variable was a difference.\n\n\n2.4.2 Formulas\nWe frequently use formulas in R. The general syntax of a formula is:\ny ~ x, data = dataset\nWhere:\n\ny is the response variable (aka: dependent or outcome).\nx is the explanatory variable (aka independent, predictor or exposure). We can have more than one explanatory variable (e.g., confounders).\ndataset is the name of the data frame or tibble where the variables x and y can be found.\n\n\n\n\n\n\n\nImportant\n\n\n\nThe symbol ~ is used in R for formulas. It can be interpreted as depends on. In the most typical scenario: y ~ x means “y depends on x” or “y is a function of x”.\n\n\n\n\n2.4.3 Frequency tables for continuous variables\nFor relatively large samples, we can take a look at the distribution of a continuous outcome by breaking values in different number of classes (between 8 and 20) and constructing a frequency table:\n\nwcgs %$%\n  freq_cont(chol, bks = seq(100, 650, 50))\n\n       Class Mids Counts rel.freq cum.freq\n1  (100,150]  125     89     0.03     0.03\n2  (150,200]  175    761     0.24     0.27\n3  (200,250]  225   1454     0.46     0.73\n4  (250,300]  275    673     0.21     0.94\n5  (300,350]  325    144     0.05     0.99\n6  (350,400]  375     19     0.01     1.00\n7  (400,450]  425      1     0.00     1.00\n8  (450,500]  475      0     0.00     1.00\n9  (500,550]  525      0     0.00     1.00\n10 (550,600]  575      0     0.00     1.00\n11 (600,650]  625      1     0.00     1.00\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe use seq to generate a sequence of numbers, the first argument is the starting point, the second argument the ending point and the third argument the size of the step.\n\n\nFrequency tables are the basis for constructing histograms and they represent a way to better understand the distribution of continuous variables.\n\n\n2.4.4 Interpreting statistics\nLook at the minimum, maximum and the mean value of cholesterol. The mean is clearly closer to the minimum value than to the maximum, i.e., it is not in the centre of the two values. This fact indicates that we have subjects with relatively high values than the rest of the population; it may be just one outlier, a couple of outliers or that the distribution is clearly skewed to the right (positive).\nWe will always start our analysis with descriptive and graphical analysis, to understand our variables. That does not mean that we are going to report everything: we have to be selective.\nIn other words, for our preliminary analysis, when we are inspecting variables, we look at all the statistics and the distribution of continuous variables. For a manuscript, we would report only two statistics:\n\nFor variables following a normal distribution, we report the mean and the standard deviation. In most cases, these statistics are reported even when the variable is not normally distributed.\nFor variables which are clearly not normally distributed, we could report the median and the interquartile range (IQR).\n\n\n\n2.4.5 Stratified Analysis\nIt’s common that we want to compare statistics from different groups, in the most typical scenario, the control and the experimental (or cases) group. For this reason, it is helpful to display statistics of continuous variables, stratified by groups of interest.\n\nwcgs %&gt;%\n  estat(~ chol|chd) %&gt;%\n  as_hux() %&gt;% theme_pubh() %&gt;% set_width(0.8) %&gt;% \n  add_footnote(\"Data from the WCGS.\", font_size = 9)\n\n\n\nTable 2.6: Descriptive statistics of blood cholesterol by coronary heart disease (CHD) event.\n\n\n\nCoronary Heart Disease\nN\nMin.\nMax.\nMean\nMedian\nSD\nCV\n\n\nCholesterol (mg/dl)\nNo CHD\n2885.00\n103.00\n400.00\n224.26\n221.00\n42.22\n0.19\n\n\n\nCHD\n257.00\n155.00\n645.00\n250.07\n245.00\n49.40\n0.20\n\n\nData from the WCGS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is valid to input the formula as either chol ~ chd (read as chol depends on chd) or as ~ chol|chd (read as chol given chd).\n\n\nAlternatively, we can use group_by.\n\nwcgs %&gt;%\n  group_by(chd) %&gt;%\n  descr(chol, show = c('label', 'n', 'mean', 'sd', \n                       'md', 'skew'))\n\n\n## Basic descriptive statistics\n\n\nGrouped by: No CHD\n\n  var               label    n   mean    sd  md skew\n chol Cholesterol (mg/dl) 2885 224.26 42.22 221 0.41\n\n\nGrouped by: CHD\n\n  var               label   n   mean   sd  md skew\n chol Cholesterol (mg/dl) 257 250.07 49.4 245 2.25\n\n\n\nwcgs %&gt;%\n  group_by(chd) %&gt;%\n  summarise(\n    N = n(),\n    Mean = mean(chol, na.rm = TRUE),\n    SD = sd(chol, na.rm = TRUE),\n    Median = median(chol, na.rm = TRUE),\n    CV = rel_dis(chol)\n  ) \n\n# A tibble: 2 × 6\n  chd        N  Mean    SD Median    CV\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD  2897  224.  42.2    221 0.188\n2 CHD      257  250.  49.4    245 0.198\n\n\n\nQuestion: What can you conclude from the descriptive statistics of cholesterol by CHD status?\nAnswer: Subjects with a CHD event from the WCGS dataset have a mean value of blood cholesterol higher than those without a CHD event. We do not know if that difference is statistically significant or not.\n\nThe advantage of group_by is that we can stratify for more than one variable, for example:\n\nwcgs %&gt;%\n  group_by(chd, smoker) %&gt;%\n  descr(chol, show = c('label', 'n', 'mean', 'sd', \n                       'md', 'skew'))\n\n\n## Basic descriptive statistics\n\n\nGrouped by: No CHD, Non-Smoker\n\n  var               label    n   mean    sd  md skew\n chol Cholesterol (mg/dl) 1549 221.01 40.73 218  0.4\n\n\nGrouped by: No CHD, Smoker\n\n  var               label    n   mean   sd  md skew\n chol Cholesterol (mg/dl) 1336 228.03 43.6 226  0.4\n\n\nGrouped by: CHD, Non-Smoker\n\n  var               label  n   mean    sd  md skew\n chol Cholesterol (mg/dl) 98 243.38 56.86 238 3.59\n\n\nGrouped by: CHD, Smoker\n\n  var               label   n   mean    sd  md skew\n chol Cholesterol (mg/dl) 159 254.19 43.86 252 0.67\n\n\n\nwcgs %&gt;% \n  select(chol, chd, smoker) %&gt;% \n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n    smoker = relevel(smoker, ref = \"Smoker\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  tbl_strata(\n    strata = smoker,\n    .tbl_fun = ~ .x %&gt;%\n      tbl_summary(by = chd, missing = \"no\") \n  ) %&gt;% \n  cosm_sum() %&gt;% theme_pubh(2) %&gt;% \n  set_align(1, everywhere, \"center\") %&gt;% \n  add_footnote(\"Median (IQR). Data from the WCGS dataset.\", \n               font_size = 9)\n\n\n\nTable 2.7: Descriptive statistics of cholesterol by coronary heart disease (CHD) event and smoking status.\n\n\n\nSmoker\nNon-Smoker\n\n\nVariable\nCHD, N = 159\nNo CHD, N = 1,343\nCHD, N = 98\nNo CHD, N = 1,554\n\n\nCholesterol (mg/dl)\n252 (225, 278)\n226 (200, 254)\n238 (211, 269)\n218 (193, 248)\n\n\nMedian (IQR). Data from the WCGS dataset.\n\n\n\n\n\n\n\n\n\nExercise: Compare the statistics of breast-milk intake (dl.milk) by sex from the kfm dataset.\n\n\nkfm %&gt;%\n  estat(dl.milk ~ sex) %&gt;%\n  as_hux() %&gt;% theme_pubh() %&gt;%\n  add_footnote(\"Data from the kfm dataset.\", font_size = 9)\n\n\n\nTable 2.8: Descriptive statistics of breast-milk intake in babies.\n\n\n\nSex\nN\nMin.\nMax.\nMean\nMedian\nSD\nCV\n\n\nBreast-milk intake (dl/day)\nBoy\n25.00\n4.91\n10.43\n7.95\n8.39\n1.49\n0.19\n\n\n\nGirl\n25.00\n4.44\n10.03\n7.06\n7.22\n1.42\n0.20\n\n\nData from the kfm dataset.\n\n\n\n\n\n\n\n\n\nQuestion: What are your main observations?\nAnswer: Breast-milk intake by boys is almost one more dl/day than girls. We do not know if this difference is significant or not. Variability in breast-milk intake was the same between boys and girls."
  },
  {
    "objectID": "descriptives.html#creating-tables-for-publication",
    "href": "descriptives.html#creating-tables-for-publication",
    "title": "2  Descriptive Statistics",
    "section": "2.5 Creating tables for publication",
    "text": "2.5 Creating tables for publication\nIt is very common to report the descriptive statistics from the data in the first table of papers. The strategy is to calculate the descriptive statistics for all our variables and then export it in a way the table could be read by a word processor or spreadsheet application.\nWe can construct a single table of descriptive statistics for all of our variables with a single command. The function mytable from the moonBook package allows us to do that. For continuous variables, mytable displays means and standard deviations by default but that can be changed to display medians and inter quantile ranges instead.\nWe partially remove id and ncigs it from the dataset using negative indexing.\n\nwcgs %&gt;% \n  select(- c(id, ncigs)) %&gt;% \n  tbl_summary() %&gt;% \n  cosm_sum(bold = TRUE) %&gt;% \n  add_footnote(\"Median (IQR); n (%)\", font_size = 9)\n\n\n\nTable 2.9: Descriptive statistics of the WCGS dataset.\n\n\nVariable\nN = 3,154\n\n\nAge (years)\n45 (42, 50)\n\n\nHeight (cm)\n178 (173, 183)\n\n\nWeight (kg)\n77 (70, 83)\n\n\nSBP (mm Hg)\n126 (120, 136)\n\n\nDBP (mm Hg)\n80 (76, 86)\n\n\nCholesterol (mg/dl)\n223 (197, 253)\n\n\nUnknown\n12\n\n\nBehaviour pattern\n\n\n\nA1\n264 (8.4%)\n\n\nA2\n1,325 (42%)\n\n\nB3\n1,216 (39%)\n\n\nB4\n349 (11%)\n\n\nDichotomous behaviour\n\n\n\nA\n1,589 (50%)\n\n\nB\n1,565 (50%)\n\n\nCoronary Heart Disease\n\n\n\nNo CHD\n2,897 (92%)\n\n\nCHD\n257 (8.1%)\n\n\nType of CHD\n\n\n\nNo CHD\n2,897 (92%)\n\n\nMI or SD\n135 (4.3%)\n\n\nAngina\n71 (2.3%)\n\n\nSilent MI\n51 (1.6%)\n\n\nFollow up time (days)\n2,942 (2,842, 3,037)\n\n\nCorneal arcus\n\n\n\nAbsent\n2,211 (70%)\n\n\nPresent\n941 (30%)\n\n\nUnknown\n2\n\n\nSmoking status\n\n\n\nNon-Smoker\n1,652 (52%)\n\n\nSmoker\n1,502 (48%)\n\n\nMedian (IQR); n (%)\n\n\n\n\n\n\n\n\n\n2.5.1 Stratified tables\nWe can use cross_tbl to report descriptive statistics of relevant variables, by exposure of interest. We will use negative selection, removing some columns.\n\nwcgs %&gt;%\n  select(-c(id, beh_pat, ncigs, time)) %&gt;%\n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n    arcus = relevel(arcus, ref = \"Present\"),\n    smoker = relevel(smoker, ref = \"Smoker\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  cross_tbl(by = \"dib_pat\") %&gt;% \n  add_footnote(\"n (%); Median (IQR)\", font_size = 9)\n\n\n\nTable 2.10: Descriptive statistics of the WCGS dataset by behaviour pattern.\n\n\n\nDichotomous behaviour\n\n\n\n\nA, N = 1,589\nB, N = 1,565\nOverall, N = 3,154\n\n\nAge (years)\n46 (42, 51)\n45 (41, 49)\n45 (42, 50)\n\n\nHeight (cm)\n178 (173, 183)\n178 (173, 180)\n178 (173, 183)\n\n\nWeight (kg)\n77 (72, 83)\n76 (70, 82)\n77 (70, 83)\n\n\nSBP (mm Hg)\n128 (120, 138)\n124 (118, 136)\n126 (120, 136)\n\n\nDBP (mm Hg)\n80 (76, 88)\n80 (76, 86)\n80 (76, 86)\n\n\nCholesterol (mg/dl)\n226 (200, 256)\n221 (195, 251)\n223 (197, 253)\n\n\nUnknown\n5\n7\n12\n\n\nCoronary Heart Disease\n\n\n\n\n\nCHD\n178 (11%)\n79 (5.0%)\n257 (8.1%)\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\nType of CHD\n\n\n\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\nMI or SD\n93 (5.9%)\n42 (2.7%)\n135 (4.3%)\n\n\nAngina\n48 (3.0%)\n23 (1.5%)\n71 (2.3%)\n\n\nSilent MI\n37 (2.3%)\n14 (0.9%)\n51 (1.6%)\n\n\nCorneal arcus\n\n\n\n\n\nPresent\n506 (32%)\n435 (28%)\n941 (30%)\n\n\nAbsent\n1,082 (68%)\n1,129 (72%)\n2,211 (70%)\n\n\nUnknown\n1\n1\n2\n\n\nSmoking status\n\n\n\n\n\nSmoker\n805 (51%)\n697 (45%)\n1,502 (48%)\n\n\nNon-Smoker\n784 (49%)\n868 (55%)\n1,652 (52%)\n\n\nn (%); Median (IQR)\n\n\n\n\n\n\n\n\nThe WCGS was a cohort study, hence, observational. Some people like to display a column with \\(p\\)-values comparing the groups; cross_tab can display \\(p\\)-values for stratified tables. If displayed, those \\(p\\)-values come from univariate analysis.\n\nwcgs %&gt;%\n  select(-c(id, beh_pat, ncigs, time)) %&gt;%\n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n    arcus = relevel(arcus, ref = \"Present\"),\n    smoker = relevel(smoker, ref = \"Smoker\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  cross_tbl(by = \"dib_pat\", p_val = TRUE) %&gt;%  \n  add_footnote(\"n(%); Median (IQR);\",font_size = 9)\n\n\n\nTable 2.11: Descriptive statistics of the WCGS dataset by behaviour pattern.\n\n\n\nDichotomous behaviour\n\n\n\n\n\nA, N = 1,589\nB, N = 1,565\nOverall, N = 3,154\np-value\n\n\nAge (years)\n46 (42, 51)\n45 (41, 49)\n45 (42, 50)\n&lt;0.001\n\n\nHeight (cm)\n178 (173, 183)\n178 (173, 180)\n178 (173, 183)\n0.036\n\n\nWeight (kg)\n77 (72, 83)\n76 (70, 82)\n77 (70, 83)\n0.009\n\n\nSBP (mm Hg)\n128 (120, 138)\n124 (118, 136)\n126 (120, 136)\n&lt;0.001\n\n\nDBP (mm Hg)\n80 (76, 88)\n80 (76, 86)\n80 (76, 86)\n0.002\n\n\nCholesterol (mg/dl)\n226 (200, 256)\n221 (195, 251)\n223 (197, 253)\n0.003\n\n\nUnknown\n5\n7\n12\n\n\n\nCoronary Heart Disease\n\n\n\n&lt;0.001\n\n\nCHD\n178 (11%)\n79 (5.0%)\n257 (8.1%)\n\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\n\nType of CHD\n\n\n\n&lt;0.001\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\n\nMI or SD\n93 (5.9%)\n42 (2.7%)\n135 (4.3%)\n\n\n\nAngina\n48 (3.0%)\n23 (1.5%)\n71 (2.3%)\n\n\n\nSilent MI\n37 (2.3%)\n14 (0.9%)\n51 (1.6%)\n\n\n\nCorneal arcus\n\n\n\n0.013\n\n\nPresent\n506 (32%)\n435 (28%)\n941 (30%)\n\n\n\nAbsent\n1,082 (68%)\n1,129 (72%)\n2,211 (70%)\n\n\n\nUnknown\n1\n1\n2\n\n\n\nSmoking status\n\n\n\n&lt;0.001\n\n\nSmoker\n805 (51%)\n697 (45%)\n1,502 (48%)\n\n\n\nNon-Smoker\n784 (49%)\n868 (55%)\n1,652 (52%)\n\n\n\nWilcoxon rank sum test; Pearson's Chi-squared test\n\n\nn(%); Median (IQR);\n\n\n\n\n\n\n\n\nIn all tables before, for continues variables, cross_tbl reports by default median and IQR. By including the argument method = 1, cross_tbl would report mean and standard deviations.\n\nwcgs %&gt;%\n  select(-c(id, beh_pat, ncigs, time)) %&gt;%\n  mutate(\n    chd = relevel(chd, ref = \"CHD\"),\n    arcus = relevel(arcus, ref = \"Present\"),\n    smoker = relevel(smoker, ref = \"Smoker\")\n  ) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  cross_tbl(by = \"dib_pat\", method = 1) %&gt;% \n  set_width(0.9) %&gt;%  \n  add_footnote(\"n (%); Mean (SD)\", font_size = 9)\n\n\n\nTable 2.12: Descriptive statistics of the WCGS dataset by behaviour pattern.\n\n\n\nDichotomous behaviour\n\n\n\n\nA, N = 1,589\nB, N = 1,565\nOverall, N = 3,154\n\n\nAge (years)\n47 (6)\n46 (5)\n46 (6)\n\n\nHeight (cm)\n177 (7)\n177 (6)\n177 (6)\n\n\nWeight (kg)\n77 (10)\n77 (9)\n77 (10)\n\n\nSBP (mm Hg)\n130 (16)\n127 (14)\n129 (15)\n\n\nDBP (mm Hg)\n83 (10)\n81 (9)\n82 (10)\n\n\nCholesterol (mg/dl)\n229 (44)\n224 (42)\n226 (43)\n\n\nUnknown\n5\n7\n12\n\n\nCoronary Heart Disease\n\n\n\n\n\nCHD\n178 (11%)\n79 (5.0%)\n257 (8.1%)\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\nType of CHD\n\n\n\n\n\nNo CHD\n1,411 (89%)\n1,486 (95%)\n2,897 (92%)\n\n\nMI or SD\n93 (5.9%)\n42 (2.7%)\n135 (4.3%)\n\n\nAngina\n48 (3.0%)\n23 (1.5%)\n71 (2.3%)\n\n\nSilent MI\n37 (2.3%)\n14 (0.9%)\n51 (1.6%)\n\n\nCorneal arcus\n\n\n\n\n\nPresent\n506 (32%)\n435 (28%)\n941 (30%)\n\n\nAbsent\n1,082 (68%)\n1,129 (72%)\n2,211 (70%)\n\n\nUnknown\n1\n1\n2\n\n\nSmoking status\n\n\n\n\n\nSmoker\n805 (51%)\n697 (45%)\n1,502 (48%)\n\n\nNon-Smoker\n784 (49%)\n868 (55%)\n1,652 (52%)\n\n\nn (%); Mean (SD)"
  },
  {
    "objectID": "graphical.html#overview",
    "href": "graphical.html#overview",
    "title": "3  Graphical Analysis",
    "section": "3.1 Overview",
    "text": "3.1 Overview\nIt would be impossible to cover all possible R graphs in this laboratory, let alone all the useful options for each type of graph, so we will focus on identifying the main types of graphs and look at some commonly used options. Once you have mastered the basic principles covered in this laboratory, you should be well prepared to construct basic graphs.\nThis lab has several optional sections, you are welcome to do to those sections or simply use them as a reference for making plots.\nOnce you have completed this lab, you should feel comfortable:\n\nConstructing histograms and density plots.\nConstructing scatter plots (both bivariate and matrix) and line charts.\nConstructing box plots.\nConstructing QQ-plots.\nConstructing strip charts.\nConstructing bar charts.\nAdding titles and labels to these graphs.\nCustomising these graphs by setting appropriate options.\nExporting plots for publications or other purposes.\n\n\nSummary of New Commands\n\n\n\n\n\n\n\n\n\nCommand\nLibrary\nFunction\n\n\n\n\nautoplot\nggplot2\nPlots objects from different classes\n\n\naxis_labs\npubh\nUses labels from labelled data for axis legends\n\n\nbar_error\npubh\nConstructs bar charts with error bars\n\n\nbox_plot\npubh\nConstructs box-plots\n\n\ncorrelation\ncorrelation\nEstimates correlation coefficients\n\n\ndev.off\ngrDevices\nCloses the current graphing device\n\n\nget_label\nsjlabelled\nRetrieves variable label\n\n\ngf_counts\nggformula\nConstructs bar plots (using counts)\n\n\ngf_dens\nggformula\nConstructs density plots (contour)\n\n\ngf_density\nggformula\nConstructs density plots (filled)\n\n\ngf_dhistogram\nggformula\nConstructs histograms in terms of density\n\n\ngf_histogram\nggformula\nConstructs histograms in terms of frequency\n\n\ngf_jitter\nggformula\nConstructs strip charts\n\n\ngf_line\nggformula\nConstructs line charts\n\n\ngf_labs\nggformula\nEdits plot’s labels (axis, mains, facets)\n\n\ngf_lm\nggformula\nFits a simple linear model to a scatter plot\n\n\ngf_point\nggformula\nConstructs scatter plots\n\n\ngf_refine\nggformula\nUsed to change scales and theme in a plot\n\n\ngf_smooth\nggformula\nAdds a loess fit (trend) to a scatter plot\n\n\ngf_star\npubh\nAdds a significant line for annotating plots\n\n\ngf_summary\nggformula\nAggregates data by statistics to add to a plot\n\n\ngf_theme\nggformula\nChanges aspects of the theme\n\n\ngf_violin\nggformula\nConstructs violin plots\n\n\nggpairs\nGGally\nConstructs scatter plot matrices\n\n\nhis_norm\npubh\nConstructs histograms with normal curve\n\n\nna.omit\nstats\nRemoves observations with missing values from a dataset\n\n\npdf\ngrDevices\nExports figures as PDF\n\n\npivot_longer\ndplyr\nTransforms data from wide to long format\n\n\nplot_scatter\nsjPlot\nConstructs scatter plots\n\n\npostscript\ngrDevices\nExports figures as EPS files\n\n\nqq_plot\npubh\nConstructs QQ-plots\n\n\nremove_all_labels\nsjlabelled\nRemoves labels from a dataset\n\n\nsjplot\nsjPlot\nConstructs plots using pipe-workflow\n\n\nstat_compare_means\nggpubr\nAdds a significant line for annotating plots\n\n\nstrip_error\npubh\nConstructs strip plots with error bars"
  },
  {
    "objectID": "graphical.html#introduction",
    "href": "graphical.html#introduction",
    "title": "3  Graphical Analysis",
    "section": "3.2 Introduction",
    "text": "3.2 Introduction\nChapter 4 of (Dalgaard 2008) shows how to do basic descriptive statistics, as well as the classic plots in R. There are more graphic packages that allow better graphics, one of them is ggplot2 whose syntax is relatively complex. We will be using the package ggformula which simplifies syntax for constructing plots with ggplot2 using formulas as part of its syntax. The package is loaded in the system when you load the pubh package.\nThere are different reasons to make a plot. For manuscripts and reports, plots in black and white (B&W) are sometimes preferred (as figures in colour have an extra cost). However, if you want to show your plots in a presentation or a poster, a colour would be more appropriate.\nFor manuscripts\n\nInclude figure legends (captions).\nThe main title is not included in the plot but as part of the description in the legend.\nUse B&W plots, you can use any variation of grey.\nExport the plot as a .eps or .pdf file (see last section).\n\nFor reports, including assignments\n\nInclude figure legends (captions).\nThe main title is not included in the plot but as part of the description in the legend.\nYou can play with colours, but be smart, e.g., avoid bright colours.\n\nFor presentations\n\nDo not include long legends.\nUse a medium to large font so audience can read your legends.\nInclude a main title for the plot.\nUse colours!\nInclude extra information to explain the plot, or make sure that you explain well your plot in your presentation.\nExport the plot as a .pdf or .png file (see last section).\n\nWe will use the wcgs dataset as an example of a relatively large data, the kfm dataset as an example of a relatively small data and the birthwt as an example of medium size data.\nFirst we load datasets that we have saved in previous labs:\n\nwcgs = read_rds('data/wcgs.rds')\nkfm = read_rds('data/kfm.rds')\n\nNext, we load the birthwt dataset from the MASS package, generate factors and assign labels.\n\ndata(birthwt, package = \"MASS\")\nbirthwt = as_tibble(birthwt)\nbirthwt = birthwt %&gt;%\n  mutate(\n    low = factor(low, labels = c(\"No\", \"Yes\")),\n    lwt = lwt * 0.4536,\n    smoke = factor(smoke, labels = c(\"Non-smoker\", \"Smoker\")),\n    Race = factor(race &gt; 1, labels = c(\"White\", \"Non-white\")),\n    race = factor(race, labels = c(\"White\", \"African-American\", \"Other\")),\n    ht = factor(ht, labels = c(\"No\", \"Yes\")),\n    ui = factor(ui, labels = c(\"No\", \"Yes\"))\n  ) %&gt;%\n  var_labels(\n    low = \"Birth weight less than 2.5 kg\",\n    age = \"Mother's age (years)\",\n    lwt = \"Mother's weight (kg)\",\n    bwt = 'Birth weight (g)',\n    smoke = 'Smoking status',\n    race = \"Mother's race\",\n    ptl = \"Premature labours\",\n    ht = \"Hypertension\",\n    ui = \"Uterine irritability\",\n  )\n\n\nwrite_rds(birthwt, \"data/birthwt.rds\")\n\n\n3.2.1 Extensions and links\nFor this lab, we are going to load some packages that extend functions from ggplot2.\n\nFunctions in ggsci are really optional as they provide palettes used in journals.\nFunctions in GGaly are just for special cases, like scatter plot matrices.\nFunctions in ggpubr are intended for publication purposes.\nFunctions in plotly allow to interact with the plots.\n\n\n\n\n\n\n\nTip\n\n\n\nExternal links\n\nMore information on ggformula, including tutorials, can be found here.\nExamples for ggpubr can be found here.\nExamples for GGally can be found here.\nExamples about axis scales and transformations can be found here."
  },
  {
    "objectID": "graphical.html#distributions",
    "href": "graphical.html#distributions",
    "title": "3  Graphical Analysis",
    "section": "3.3 Distributions",
    "text": "3.3 Distributions\nAs part of the descriptive analysis, it is important to understand the distribution of continuous outcomes. For relatively large datasets, histograms and density plots are appropriate.\n\n3.3.1 Histograms\nWe use histograms to look at the distribution of continuous variables. Histograms make most sense for relatively large data (\\(\\geq\\) 100 observations). The ggformula package uses formulas; in the case of histograms, there is no left-hand side (as it was the case of estat). For example, for plotting the histogram of systolic blood pressure we type:\n\nwcgs %&gt;%\n  gf_histogram( ~ sbp, col = \"black\", fill = \"pink\")\n\n\n\n\nFigure 3.1: Histogram of systolic blood pressure (SBP) for the WCGS dataset.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe bars are not at the centre of the plot, that means we have cases (very few of them) with high values of cholesterol. In other words, the distribution is clearly skewed to the right (i.e., with a positive skew).\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAt the start of the code, the first two lines (hidden on the final document) are:\n\n\n#| label: fig-fig1\n#| fig-cap: \"Histogram of systolic blood pressure (SBP) for the WCGS dataset.\"\n\n\nThe label (name) of the chunk is: fig-fig1. When the label starts with fig-, the figure is automatically numbered. To refer to Figure 3.1 in the document we type: @fig-fig1.\nThe option col refers to the colour of the lines defining the bars; the option fill refers to the colour inside the bars.\nYou can look at the list of colours available by typing colors() in the Console panel.\n\n\n\nIn our first plot, the \\(y\\)-axis shows the frequency (counts), we may want to show the density (proportion) instead. Densities are preferred when comparing two or more distributions. To choose density we use gf_dhistogram:\n\nwcgs %&gt;%\n  gf_dhistogram(~ sbp, col = \"black\", fill = \"plum3\")\n\n\n\n\nFigure 3.2: Histograms of systolic blood pressure (SBP) for the WCGS dataset.\n\n\n\n\nWe can compare groups using the | symbol, which can be understood as given or by:\n\nwcgs %&gt;%\n  gf_dhistogram(~ sbp|chd, col = \"black\", fill = \"slategray3\")\n\n\n\n\nFigure 3.3: Histogram of systolic blood pressure (SBP) by coronary heart disease (CHD) event for the WCGS dataset.\n\n\n\n\n\n\n3.3.2 Density plots\nAn alternative to histograms is density plots.\n\nbirthwt %&gt;%\n  gf_dens(~ bwt, col = \"cadetblue\", lwd = 1)\n\n\n\n\nFigure 3.4: Distribution of birth weight.\n\n\n\n\nWe can use superimposed density plots to compare distributions.\n\nbirthwt %&gt;%\n  gf_density(~ bwt, fill = ~ smoke, alpha = 0.3)\n\n\n\n\nFigure 3.5: Comparison of birth weight distributions by mother’s smoking status.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIn the previous code, instead of displaying the distributions in two different panels (faceting) as we did with histograms, we are displaying them in the same panel but super-imposed.\nBy using the option fill = ~ smoke, we are telling R to select filling colours according to levels in the variable smoke.\nWith alpha we reduce the opacity, thus increase the transparency.\nWith gf_dens we plot only the contour whereas with gf_density the area under the curve is filled.\n\n\n\nIf you use the template from the pubh package, legends are placed on top of the plot. To specify a different location, we can use the argument legend.position in gf_theme. With legend.position we can either specify a side of the plot (e.g. \"right\") or give relative coordinates. For example:\n\nbirthwt %&gt;%\n  gf_density(~ bwt|smoke, fill = ~ race, alpha=0.3) %&gt;%\n  gf_theme(legend.position = c(0.12, 0.85))\n\n\n\n\nFigure 3.6: Comparison of birth weight distributions by smoking status of the mother and race of the mother.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nCoordinates are given as c(x, y), where values of x and y go from 0 to 1 and represent a proportion in the corresponding axis.\n\n\nTo help on the interpretation of histograms, we can impose a density plot derived from a population with the same mean and standard deviation of the variable of interest. To make this plot, we can use the function hist_norm from the pubh package.\n\nwcgs %&gt;%\n  hist_norm(~ sbp, bins = 30) \n\n\n\n\nFigure 3.7: Histogram of systolic blood pressure (SBP) for the WCGS dataset. The black curve represents a density plot from a normal distribution.\n\n\n\n\n\n\n3.3.3 QQ-plots\nThe best way to determine if a continuous variable is normally distributed or not is with quantile-quantile plots (QQ-plots). We plot the quantiles of our variable of interest against quantiles from the standard normal distribution (which has a mean \\(\\mu=0\\) and a standard deviation \\(\\sigma=1\\)). This type of QQ-plots against the normal distribution are known as QQ-normal plots. If the variable is normally distributed, then a linear relationship will be observed.\nTo construct a QQ-plot we can use the function qq_plot from the pubh package. QQ-plots can be used even for relatively small samples.\n\nkfm %&gt;%\n  qq_plot(~ dl.milk) \n\n\n\n\nFigure 3.8: QQ-plot of breast-milk intake against the normal distribution.\n\n\n\n\nWe can use plots to display more than one plot in a grid:\n\np1 = kfm %&gt;%\n  gf_dens(~ dl.milk, size = 1) %&gt;%\n  axis_labs()\n\np2 = kfm %&gt;%\n  qq_plot(~ dl.milk) %&gt;%\n  axis_labs()\n\nplots(p1, p2, n_columns = 2, tags = \"a\")\n\n\n\n\nFigure 3.9: Distribution of breast-milk intake in infants. (a) Density plot. (b) QQ-plot against the normal distribution.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe argument n_columns = 2 is used to display the two plots on the same row. By default n_columns = 1.\nWith tags = \"a\" we are using lower case auto caption.\nWe need to include axis_labs when we display more than one plot as ggormula does not longer recognise the original label of the variable.\n\n\n\nA variable that is positive-skewed is \\(J\\)-shaped in a QQ-plot.\n\nExercise: Using a QQ-plot, determine if SBP from normal subjects (no CHD event) in the WCGS dataset follows a normal distribution.\n\n\nwcgs %&gt;%\n  filter(chd == \"No CHD\") %&gt;%\n  copy_labels(wcgs) %&gt;%\n  qq_plot(~ sbp)\n\n\n\n\nFigure 3.10: QQ-plot of systolic blood pressure (SBP) against the normal distribution, for subjects who did not present a coronary heart disease event in the WCGS dataset.\n\n\n\n\n\nAnswer: The QQ-plots shows that the distribution of SBP in control subjects is positive skewed."
  },
  {
    "objectID": "graphical.html#associations-between-continuous-variables",
    "href": "graphical.html#associations-between-continuous-variables",
    "title": "3  Graphical Analysis",
    "section": "3.4 Associations between continuous variables",
    "text": "3.4 Associations between continuous variables\n\n3.4.1 Scatter plots\nWe use scatter plots to look at the relationship between two continuous variables. By default, the dependent variable (response) is plotted on the \\(y\\) axis while the independent variable (explanatory) is plotted on the \\(x\\) axis.\nFrom the kfm dataset, let’s see if there is a relationship between the weight of the mother and the breast-milk intake of the child.\n\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight, pch = 16, \n           color = ~ sex, size = 1.5)\n\n\n\n\nFigure 3.11: Relationship between maternal weight and breast-milk intake in infants.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe pch argument in gf_point can be used to specify the symbol to plot the data. The default is pch = 16 which uses filled circles.\n\n\nFigure 3.12 shows the most common symbols used in R. Symbols are defined with the option pch. For example, pch = 17 would use filled triangles. You can also use symbols from the keyboard, for example pch = \"+\", pch = \"o\", pch = \"@\", etc. When we have an enormous sample size, and we want to use a tiny symbol, we can type: pch = \".\", alternatively, play with the option size.\n\n\n\n\n\nFigure 3.12: Common symbols used in R.\n\n\n\n\nThe advantage of ggplot2 and ggformula is that plots can be extended and used for multivariate graphical analysis. For example, we could add a line representing a linear fit:\n\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight) %&gt;%\n  gf_lm(interval = \"confidence\", col = \"indianred\", \n        fill = \"indianred\")\n\n\n\n\nFigure 3.13: Relationship between maternal weight and breast-milk intake in infants.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe use gf_lm to fit a linear model (lm) and gf_smooth to show the trend (loess fit).\nThe default is to not show a band (interval = \"none\"). In the current example, we are showing the confidence intervals around the predicted fitted values.\n\n\n\nWe can plot, on the same panel, the relationship between maternal weight and breast-milk intake by sex.\n\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight, \n           pch = ~ sex, col = ~ sex) %&gt;%\n  gf_lm(col = ~ sex)\n\n\n\n\nFigure 3.14: Relationship between maternal weight and breast-milk intake by sex.\n\n\n\n\nThe package ggsci contains different palettes of colours for the most important journals (including Nature, Science, NEJM, etc.). Some examples:\n\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight, \n           pch = ~ sex, col = ~ sex) %&gt;%\n  gf_lm(col = ~ sex) %&gt;%\n  gf_refine(scale_color_jama()) \n\n\n\n\nFigure 3.15: Relationship between maternal weight and breast-milk intake by sex. Plot uses palette of colours favoured by JAMA.\n\n\n\n\nWe already learnt how to construct conditional plots, i.e., to display plots in different panels given a particular condition (using the | symbol).\n\nExercise: Construct a plot showing the relationship between maternal weight and breast-milk intake by sex using one panel for each sex. Include a linear fit to your plot with corresponding bands of confidence intervals.\n\n\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight|sex, pch = 20) %&gt;%\n  gf_lm(interval = \"confidence\", col = \"indianred\", \n        fill = \"indianred\")\n\n\n\n\nFigure 3.16: Relationship between maternal weight and breast-milk intake by sex.\n\n\n\n\n\n\n3.4.2 Scatter plot matrix (supplementary, optional sub-section)\nWhen we are working with more than two continuous variables and we want to look at potential correlations between them, we can generate a single plot, with all two-variable combinations displayed in different panels. This kind of plot is known as a scatter plot matrix and we can construct them with ggpairs from the package GGally.\n\n\n\n\n\n\nTip\n\n\n\nGGally has two other functions that can also construct a scatter plot matrix: ggduo and ggscatmat; ggapairs is however, more flexible.\n\n\nFor example, we could be interested in looking at the relationship between pollution, expressed in ozone concentration, in relation with other environmental variables. We load the dataset:\n\ndata(airquality)\nairquality &lt;- na.omit(airquality)\nnames(airquality)\n\n[1] \"Ozone\"   \"Solar.R\" \"Wind\"    \"Temp\"    \"Month\"   \"Day\"    \n\n\nNext, we define the variable Month as a factor.\n\nmes = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\")\nairquality = airquality %&gt;%\n  mutate(\n    Month = factor(Month, labels = mes)\n    )\n\nFunction ggpairs does not work well with labelled datasets so we are going to generate a vector with the labels of the variables:\n\nair = c(\"Temperature (F)\", \"Wind (mph)\",\n         \"Radiation (A)\", \"Ozone (ppb)\")\n\nIn our first scatter plot matrix, we are going to show also the loess trend:\n\nairquality %&gt;%\n  ggpairs(\n    columns = 4:1,\n    lower = list(continuous = wrap(\"smooth_loess\", alpha = 0.5,\n                                   shape = 20, size = 0.9,\n                                   color = \"cadetblue\")),\n    columnLabels = air\n    )\n\n\n\n\nFigure 3.17: Relationship between pollution (ozone) and some environmental variables. Curves show loess trend.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWith option columns we select which columns of the dataset we want to plot. The default (if omitted) is to plot all.\nWe selected columns from 4 to 1 because we want for Ozone to be displayed on the \\(y\\)-axis.\nWe use option lower to indicate what we want to plot on the lower diagonal.\nWe add a loess trend with smooth_loess. For a linear model, we would use smooth.\nThe diagonal shows the distributions of each variable. For continuous variables, the diagonal displays density plots and for categorical variables shows bar charts.\nTo understand the plot, focus on the bottom row. In panels of the bottom row, ozone is plotted on the \\(y\\)-axis; first against temperature, next against wind and finally, against solar radiation.\n\n\n\nThe airquality dataset includes a categorical variable, Month that we can use to stratify continuous variables.\n\nairquality %&gt;%\n  ggpairs(\n    columns = 4:1, \n    mapping = aes(color = Month, alpha = 0.8),\n    lower = list(continuous = wrap(\"points\",\n                                   shape = 20, size = 1)),\n    upper = list(continuous = wrap(\"cor\", size = 2)),\n    columnLabels = air\n    )\n\n\n\n\nFigure 3.18: Relationship between pollution (ozone) and some environmental variables by month.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nWe use mapping, a function from ggplot2 to stratify by Month. Please notice that ggplot2 does not uses formulas, hence the lack of the tilde (~).\nWe used option \"points\" as to display only symbols with no added fit.\nIf we use \"smooth\" or \"smooth_loess\" we would have added a fit for each month making the plot harder to interpret.\nWe included the option upper only to decrease the size of the font to size = 2, so the information of the correlations fit well within the panels.\n\n\n\nIf our data is labelled, we need to remove the labels for ggpair to work. As usual, as long as we don’t assign the commands of the pipe-workflow to a variable (data frame) then our alterations will not be stored and will have only a local effect.\nFor example, let’s say we would like to look at relationships within the kfm dataset. In the following code, we remove the labels and we change the reference level of sex, just to display boys in blue and girls in pink.\n\nkfm %&gt;%\n  remove_all_labels() %&gt;%\n  mutate(\n    sex = relevel(sex, ref = \"Girl\")\n  ) %&gt;%\n  ggpairs(\n    columns = c(4:7, 2),\n    mapping = aes(color = sex, alpha = 0.8),\n    lower = list(continuous = wrap(\"points\",\n                                   shape = 20, size = 1)),\n    upper = list(continuous = wrap(\"cor\", size = 3)),\n    columnLabels = c(\n      \"Child weight\",\n      \"Milk-substitute\",\n      \"Maternal weight\",\n      \"Maternal height\",\n      \"Breast-milk\"\n      )\n    )\n\n\n\n\nFigure 3.19: Relationship between breast-milk intake (dl/day) and other variables from the kfm dataset.\n\n\n\n\n\n\n3.4.3 Correlation plots\nAn alternative to scatter-plot matrices are correlation plots:\n\nairquality %&gt;% \n  select(- c(Month, Day)) %&gt;% \n  correlation(rename = air, method = \"spearman\") %&gt;% \n  summary() %&gt;% plot(show_data = \"points\") %&gt;% \n  gf_theme(theme_lucid())\n\n\n\n\nFigure 3.20: Correlation plot of continuous varialbes from the airquality dataset.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nCorrelation plots have the disadvantage of not showing the actual relationship between the variables, nor to their distributions but only a visual representation of the correlation matrix.\nCorrelation is covered in the regression section.\n\n\n\n\n\n3.4.4 Line charts\nSometimes, we don’t want to fit a trend or a linear model, but to actually connect all observations. With gf_path we connect observations in the order in which they appear in the data, whereas with gf_line we connect them in the order of the variable on the \\(x\\)-axis.\nPerhaps, the best example when we want to connect observations is when we are working with time series data.\nDownload the file fluraw.csv from Moodle, save it on your data directory and load it to the session.\n\nflu = read_csv(\"data/fluraw.csv\")\nhead(flu)\n\n# A tibble: 6 × 5\n  week       child young   mid   old\n  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 1957-08-25     0     0     1     1\n2 1957-09-01     0     2     6     1\n3 1957-09-08     0     2     4     2\n4 1957-09-15    23    73    63    11\n5 1957-09-22    63   208   173    41\n6 1957-09-29    73   207   171    27\n\n\n\nflu = flu %&gt;%\n  var_labels(\n    week = \"Date\"\n  ) %&gt;%\n  as.data.frame()\n\nThe data frame is recorded in what is known as wide format. We will use the function pivot_longer from dplyr to transform it to long format.\n\nflu_melt = flu %&gt;% \n  pivot_longer(\n    cols = !week,\n    names_to = \"agegrp\",\n    values_to = \"cases\"\n  )\n\nflu_melt %&gt;% head()\n\n# A tibble: 6 × 3\n  week       agegrp cases\n  &lt;date&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 1957-08-25 child      0\n2 1957-08-25 young      0\n3 1957-08-25 mid        1\n4 1957-08-25 old        1\n5 1957-09-01 child      0\n6 1957-09-01 young      2\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWe select the columns that we want to rearrange in cols. With !week, we are making a negative selection (read as not week).\nThe name of the new categorical variable is gen to names_to. The names of the columns are used as levels of the variable.\nThe actual values are stored in another variable, which name can be given at values_to.\n\n\n\n\nflu_melt %&gt;%\n  gf_line(cases ~ week, col = ~ agegrp, size = 0.8) %&gt;%\n  gf_labs(col = \"Age group\") %&gt;%\n  gf_refine(scale_color_npg()) \n\n\n\n\nFigure 3.21: Dynamics of reported influenza cases by age group, in the 1957 pandemic in England and Wales.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWith option size we can modify the width of the lines.\nIn this example, instead of labelling the data, I specified the names of the axis as part of the plot.\nThe last line of code is optional and it uses the palette of colours preferred by Nature (Nature Publishing Group).\n\n\n\n\n\n3.4.5 Kaplan-Meier plots\nStep plots are a variation of line charts in which the lines connect observations by steps instead of direct lines. The best example of step plots are those used in survival analysis as proposed by Kaplan and Meier.\nFor our example, we will use data about survival in patients with advanced lung cancer. We load the survival package to generate the information that we need to make a Kaplan-Meier plot. After loading the dataset, we transform variable sex to a factor.\n\n\n\n\n\n\nCaution\n\n\n\nFor this tutorial, we are not interested in the modelling, only on constructing and interpreting the plot.\n\n\n\nlibrary(survival)\ndata(cancer, package = \"survival\")\n\n\nlung = cancer %&gt;%\n  mutate(\n    Sex = factor(sex, labels = c(\"Male\", \"Female\"))\n  )\n\nNext, we estimate survival stratified by sex:\n\nsurv_fit = survfit(Surv(time, status) ~ Sex, data = lung)\nsurv_fit\n\nCall: survfit(formula = Surv(time, status) ~ Sex, data = lung)\n\n             n events median 0.95LCL 0.95UCL\nSex=Male   138    112    270     212     310\nSex=Female  90     53    426     348     550\n\n\nWe can use autoplot to construct the Kaplan-Meier plot:\n\nautoplot(surv_fit) %&gt;%\n  gf_labs(x = \"Time (days)\", y = \"Survival\")\n\n\n\n\nFigure 3.22: Kaplan-Meir plot for survival in patients with advanced lung cancer."
  },
  {
    "objectID": "graphical.html#comparing-groups",
    "href": "graphical.html#comparing-groups",
    "title": "3  Graphical Analysis",
    "section": "3.5 Comparing groups",
    "text": "3.5 Comparing groups\nMany times, we are interested in comparing groups, for example:\n\ntreatment vs control\ncases vs control\ndrug A vs drug B\nfemales vs males\n\nIn these examples, the groups or cohorts represent the explanatory (exposure) variable. If the outcome is continuous, then we are interested in comparing distributions and/or a measure of central tendency.\n\n3.5.1 Box plots\nWhen we are comparing continuous variables, between two or more groups, box plots are the best option, particularly if the number of observations in the groups is relatively large (\\(\\geq\\) 30).\nWe are going to use the function box_plot from the pubh package to construct box plots.\n\nwcgs %&gt;%\n  box_plot(chol ~ chd)\n\n\n\n\nFigure 3.23: Box plots of blood cholesterol by coronary heart disease (CHD) event from the WCGS dataset.\n\n\n\n\nIn the previous figure the presence of an outlier is clear. If we would like to remove that outlier, we would need to declare that in the report. For demonstration purposes, if we do not want to show the outlier in the plot, we have the option to filter the data as shown in the following code:\n\nwcgs %&gt;%\n  filter(chol &lt; 500) %&gt;%\n  copy_labels(wcgs) %&gt;%\n  box_plot(chol ~ chd, fill = \"thistle3\", alpha = 0.7)\n\n\n\n\nFigure 3.24: Box plots of blood cholesterol by coronary heart disease (CHD) event from the WCGS dataset. A single outlier from the CHD group with a cholesterol concentration of 675 mg/dl is not shown for group comparison purposes.\n\n\n\n\n\n\n3.5.2 Significant lines (supplementary, optional sub-section)\n\nExercise: Construct a plot comparing the distributions of breast-milk intake (dl.milk) by sex from the kfm data set.\n\n\nkfm %&gt;%\n  box_plot(dl.milk ~ sex)\n\n\n\n\nFigure 3.25: Comparison of breast-milk intake by sex.\n\n\n\n\nWe can use box plots to show the results of our analysis. It happens that there is a significant difference in the mean value of breast-milk intake between boys and girls (we do not need to worry how to test this, yet). In our final report, if we would like to include a figure to show this difference, we can draw a line over the groups that we are comparing and type an asterisk to indicate the difference. To do that, we can use gf_star from the pubh package.\n\nkfm %&gt;%\n  box_plot(dl.milk ~ sex) %&gt;%\n  gf_star(x1 = 1, y1 = 10.9, x2 = 2, y2 = 11, y3 = 11.2)\n\n\n\n\nFigure 3.26: Comparison of breast-milk intake by sex (\\(^*p\\) = 0.035, \\(t\\)-test).\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nBy default, the centre of the boxes is drawn over integer numbers in the \\(x\\)-axis, starting with one.\nWe are providing points of reference to draw the line with gf_star.\ngf_star draws a horizontal line from coordinate \\((x_1, y_2)\\) to coordinate \\((x_2, y_2)\\). Draws vertical lines below the horizontal line, towards data, from \\((x_1, y_2)\\) to \\((x_1, y_1)\\) and from \\((x_2, y_2)\\) to \\((x_2, y_1)\\). Finally, adds text above the horizontal line, at the mid point between \\(x_1\\) and \\(x_2\\), at height \\(y_3\\).\n\n\n\nIt is possible to show the actual \\(p\\)-value in the plot. We can also, keep adding layers to the plot; for example, we can show all the observations, which we will jitter on the \\(x\\)-axis, so they can be better appreciated:\n\nkfm %&gt;%\n  box_plot(dl.milk ~ sex, alpha = 0.5) %&gt;%\n  gf_jitter(dl.milk ~ sex, width = 0.1, height = 0, \n            alpha = 0.8, pch = 20, size = 0.6) %&gt;%\n  gf_star(1, 10.9, 2, 11, 11.4, \n          legend = 'p = 0.035', size = 3) \n\n\n\n\nFigure 3.27: Comparison of breast-milk intake by sex.\n\n\n\n\nPackage ggpubr includes a function, stat_compare_means that automatically calculates coordinates to show the results of the hypothesis testing. In that sense, it’s easier to use than gf_star but it’s less flexible.\n\n\n\n\n\n\nWarning\n\n\n\nggpubr does not work with formulas, instead, shares the same syntax of ggplot2 so layers are added with + instead of %&gt;%.\n\n\n\nkfm %&gt;%\n  box_plot(dl.milk ~ sex, alpha = 0.5) %&gt;%\n  gf_jitter(dl.milk ~ sex, width = 0.1, height = 0, \n            alpha = 0.8, pch = 20, size = 0.6) +\n  stat_compare_means(comparisons = list(c(1, 2)), \n                     method = 't.test')\n\n\n\n\nFigure 3.28: Comparison of breast-milk intake by sex.\n\n\n\n\n\n\n3.5.3 Strip charts\nWhen we want to compare groups and the number of observations is relatively small (\\(n\\) &lt; 30) box plots are not good. It is better to show all data in a variation of a scatter plot known as strip plot or strip chart.\nWe will use the data energy from the ISwR package about the energy expenditure of lean and obese women.\n\ndata(energy, package = \"ISwR\")\nhead(energy)\n\n  expend stature\n1   9.21   obese\n2   7.53    lean\n3   7.48    lean\n4   8.08    lean\n5   8.09    lean\n6  10.15    lean\n\n\n\nenergy = energy %&gt;%\n  var_labels(\n    expend = \"Energy expenditure (MJ)\",\n    stature = \"Stature\"\n  )\n\nwrite_rds(energy, \"data/energy.rds\")\n\n\nenergy %&gt;%\n  gf_jitter(expend ~ stature, width = 0.1, \n            height = 0)\n\n\n\n\nFigure 3.29: Comparison of energy between obese and lean women.\n\n\n\n\nIt is easier to compare the groups if we include error bars showing the 95% confidence interval (CI) around the mean. To do that, we can use the function strip_error from the pubh package.\n\nenergy %&gt;%\n  strip_error(expend ~ stature, size = 2)\n\n\n\n\nFigure 3.30: Comparison of energy expenditure between lean and obese women. Error bars represent bootstrap 95% CI.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn strip_error, the argument size refers to the size of the symbols used to plot the individual observations.\n\n\nThe rationale to add a significant line is the same as for box plots.\n\nenergy %&gt;%\n  strip_error(expend ~ stature, size = 2) %&gt;%\n  gf_star(1, 13.3, 2, 13.4, 13.5)\n\n\n\n\nFigure 3.31: Comparison of energy expenditure between lean and obese women. Error bars represent 95% bootstrap CI (\\(^*p\\) = 0.001, \\(t\\)-test).\n\n\n\n\nWe can also construct strip plots with error bars, by groups.\n\nbirthwt %&gt;%\n  strip_error(bwt ~ smoke, pch = ~ Race, col = ~ Race) %&gt;%\n  gf_refine(scale_color_jama()) \n\n\n\n\nFigure 3.32: Comparison of birth weight of babies born from mothers with different smoking status by race. Error bars represent 95% bootstrap CI.\n\n\n\n\n\n\n3.5.4 Violin plots (supplementary, optional sub-section)\nViolin plots combine ideas from both density plots and box plots. They show density distributions and can incorporate other elements, like strip charts.\n\nkfm %&gt;%\n  gf_violin(dl.milk ~ sex, fill = ~ sex, alpha = 0.3) %&gt;%\n  gf_jitter(dl.milk ~ sex, width = 0.1, height = 0)\n\n\n\n\nFigure 3.33: Comparison of breast-milk intake distributions by sex.\n\n\n\n\nFor larger datasets, we can add summary of statistics using error bars indicating the mean and 95% CI around mean values.\n\nwcgs %&gt;%\n  gf_violin(sbp ~ chd, fill = ~ beh_pat, alpha = 0.3) %&gt;%\n  gf_summary(fun.data = \"mean_cl_boot\", \n             geom = 'pointrange', fatten = 1,\n             position = position_dodge(width = 0.9)) \n\n\n\n\nFigure 3.34: Comparison of systolic blood pressure (SBP) by coronary heart disease event, stratified by behaviour pattern.\n\n\n\n\n\n\n3.5.5 Bar charts\nBar charts or bar plots are used, most of the time, to display information from a table graphically. Therefore, for publications are not the best option as a table uses less space and contains better information.\nFor example, we can use sjplot from the sjPlot package to graphically compare the frequency distributions of babies with low birth weights by race.\n\nbirthwt %&gt;%\n  select(race, low) %&gt;%\n  sjplot(show.values = FALSE, show.prc = FALSE)\n\n\n\n\nFigure 3.35: Distribution of lower birth weights by race.\n\n\n\n\nSame plot but using gf_counts from ggformula:\n\nbirthwt %&gt;%\n  gf_counts(~ race, fill = ~ low, position = \"dodge\", alpha = 0.6) %&gt;%\n  gf_refine(scale_fill_lancet())\n\n\n\n\nFigure 3.36: Distribution of lower birth weights by race.\n\n\n\n\nWe had already shown the use of box plots. In box plots, we are comparing medians and distributions instead of means. It is because of that limitation that some authors favour the use of bar charts in which the height of the bars represent mean values for each group and error bars are included to show dispersion. For inferential statistics we would show either standard errors or 95% CIs.\nIn the pubh package there is a function that automatically does that.\n\nkfm %&gt;%\n  bar_error(dl.milk ~ sex) \n\n\n\n\nFigure 3.37: Comparison of breast-milk intake between boys and girls. Bar heights are mean values and error bars represent 95% CIs (bootstrap).\n\n\n\n\nAs it was the case with strip plots, we can also construct bar plots stratified by a second factor:\n\nbirthwt %&gt;%\n  bar_error(bwt ~ smoke|Race, fill = 'plum3')\n\n\n\n\nFigure 3.38: Comparison of birth weights of babies born from mothers with different smoking status, stratified by race. Height of bars represent mean birth weight values for each group and error bars, 95% CI around those mean values.\n\n\n\n\nIt is also possible to play with col and fill and to add more layers, like gf_star.\n\np1 = birthwt %&gt;%\n  bar_error(bwt ~ smoke, col = ~ Race, \n            fill = 'white', title = \"(a)\") %&gt;%\n  gf_refine(scale_color_lancet()) %&gt;%\n  axis_labs()\n\np2 = birthwt %&gt;%\n  bar_error(bwt ~ smoke, fill = ~ Race, \n            title = \"(b)\") %&gt;%\n  axis_labs() %&gt;% \n  gf_refine(scale_fill_jama()) %&gt;%\n  gf_star(x1=0.8, x2=1.2, y1=3800, y2=3900, y3=3950)\n\nautoplot(list(p1, p2))\n\n\n\n\nFigure 3.39: Comparison of birth weights of babies born from mothers with different smoking status, stratified by race. Height of bars represent mean birth weight values for each group and error bars, 95% CI around those mean values. (a) Example showing the effect of col by group. (b) Example showing the effect of fill by group (\\(^*p\\) &lt; 0.05)."
  },
  {
    "objectID": "graphical.html#exporting-figures",
    "href": "graphical.html#exporting-figures",
    "title": "3  Graphical Analysis",
    "section": "3.6 Exporting figures",
    "text": "3.6 Exporting figures\nWhen you are working in your RMarkdown documents, there is no need to export figures, and everything is done automatically.\nWhen you run your commands interactively, plots are shown in the Plots tab. The easiest way to export them is to click on Export and select Save as PDF. PDF figures can be inserted in Word, Power Point, Keynote, Pages, etc. The plot will be saved as shown on your viewer, not always the best idea. Word and Power Point work better with .png figures.\n\n3.6.1 Postscript figures\nWe have more control if we export the file using the function pdf than exporting them with the viewer. When we use this option, the instruction could be part of our script file. We need three sections of code to export a figure this way:\n\nThe first section creates the file and defines the size of the plot. The units are in inches.\nThe second section makes the plot.\nThe third section is used to close the device. Is a way to tell the system that we have finished the plot.\n\n\npdf(\"figures/fig6.pdf\", height = 4, width = 5.3, pointsize = 9)\nbirthwt %&gt;%\n  gf_density(~ bwt|smoke, fill = ~ race, alpha=0.3)\ndev.off()\n\nFor publications, is more common that publishers will ask for a .eps file (encapsulated postscript). The command is very similar.\n\npostscript(\"figures/fig15.eps\", height = 4, width = 5.3, \n           pointsize = 9, horizontal = FALSE)\nkfm %&gt;%\n  gf_point(dl.milk ~ mat.weight, pch = ~ sex, col = ~ sex) %&gt;%\n  gf_lm(col = ~ sex) %&gt;%\n  gf_refine(scale_color_jama())\ndev.off()\n\n\n\n\n\nDalgaard, P. (2008), Introductory statistics with r, Springer."
  },
  {
    "objectID": "estimation.html#overview",
    "href": "estimation.html#overview",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nTo infer general conclusions at a population level from relatively small samples is important to have an unbiased sampling technique, so the sample represents the original population.\nAs an introduction to inferential statistics, we will look at sampling distributions, the concept of standard error and estimation of confidence intervals for continuous variables. We will also look at some aspects associated with study design including basic sample size calculations.\nOnce you have completed this laboratory, you should feel comfortable:\n\nObtaining random samples from populations.\nEstimating reference range.\nEstimating confidence intervals around the mean.\nEstimating confidence intervals around proportions.\nEstimating confidence intervals around counts.\nEstimating sample sizes for studies comparing means.\nEstimating sample sizes for studies comparing proportions.\n\n\nSummary of New Commands\n\n\n\n\n\n\n\n\n\nCommand\nLibrary\nFunction\n\n\n\n\nas.numeric\nbase\nCoerces objects of type “numeric”\n\n\nbst\npubh\nEstimates bootstrap confidence intervals for the mean\n\n\nci\nepiDisplay\nEstimates confidence intervals\n\n\ngf_dist\nggformula\nConstructs density plots for theoretical distributions\n\n\nn.for.2means\nepiDisplay\nSample size for comparing two means\n\n\nn.for.2p\nepiDisplay\nSample size for comparing two proportions\n\n\npower.t.test\nstats\nPower calculations for means\n\n\nprop_ord\npubh\nCalculates a proportion from OR and a second proportion\n\n\nreference_range\npubh\nCalculated the reference interval\n\n\nslice_sample\ndplyr\nTakes random samples\n\n\nt_test\nrstatix\nPerforms \\(t\\)-tests\n\n\nxpnorm\nmosaic\nCalculates probabilities for the Normal distribution\n\n\nxqnorm\nmosaic\nCalculates \\(z\\) values for the Normal distribution"
  },
  {
    "objectID": "estimation.html#introduction",
    "href": "estimation.html#introduction",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.2 Introduction",
    "text": "4.2 Introduction\nTo understand probability distributions, we will use the following variables\n\n\n\nVariable\nDistribution\nDataset\n\n\n\n\nchd\nBinomial\nwcgs\n\n\nncigs\nPoisson\nwcgs\n\n\nheight\nNormal\nwcgs\n\n\nIgM\nLog-Normal\nIgM (from ISwR)\n\n\nage\nNot normal\nwcgs\n\n\ndbp\nNot normal\nwcgs\n\n\n\nWe start by loading data into our session:\n\nwcgs = read_rds('data/wcgs.rds')\ndata(IgM, package = \"ISwR\")\n\nIgM is a vector, hence we will create a dataset which includes the vector.\n\nserum = tibble(IgM)\n\n\n4.2.1 The Normal distribution\n\n\n\n\n\n\nExample\n\n\n\nA normal curve was calculated from the diastolic blood pressures of 500 men (mean 82 mm Hg, standard deviation 10 mm Hg). What is the probability of finding a man with a DBP &gt; 72 mm Hg if we assume a normal distribution?\n\n\nBefore we answer this problem, we need to think about our answer. By definition, the mean value is at the centre, so the area under the curve (AUC) AUC = 50% to each side. As the value of 72 is less than the mean (82), we already know that the solution has to be greater than 50%.\nThe function xpnorm gives us the AUC to the left of the given value (meaning less than). As the total AUC = 1, to find probabilities higher than we can subtract from 1.\n\n1 - xpnorm(72, mean = 82, sd = 10)\n\n\n\n\n[1] 0.8413447\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat is the probability of finding a man with a DBP &lt; 65 mm Hg in our current example?\n\n\n\n\nCode\nxpnorm(65, mean = 82, sd = 10)\n\n\n\n\n\n[1] 0.04456546\n\n\nWhat would be the value of DBP which would contain 97.5% of the population (to the left of the curve)?\nThis is the opposite problem than the previous one. Now we know the probability and would like to know the value that would contain that probability. For finding quantiles in the normal curve, we use qnorm.\n\nxqnorm(0.975, mean = 82, sd = 10)\n\n\n\n\n[1] 101.5996\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat would be value of DBP which would contain 2.5% of the population (to the left of the curve)?\n\n\n\n\nCode\nxqnorm(0.025, mean = 82, sd = 10)\n\n\n\n\n\n[1] 62.40036\n\n\nSo, the limits that would contain 95% of the population around the mean are:\n\nreference_range(82, 10) %&gt;%\n  round(2)\n\n  lower.ri upper.ri\n1     62.4    101.6\n\n\nWhich \\(z\\)-value would contain 97.5% of the standard normal curve?\n\nxqnorm(0.975)\n\n\n\n\n[1] 1.959964\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor a normal distribution: 95% of the population is within \\(\\approx 2\\) standard deviations around the mean; 99% of the population is within \\(\\approx 3\\) standard deviations around the mean.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nConstruct a table of the following statistics: mean, standard deviation, median and skewness for the variable height from the wcgs dataset.\n\n\n\n\nCode\ntab1 = wcgs %&gt;%\n  descr(height) %&gt;%\n  select(label, mean, sd, md, skew)\n\nlabs = c(\"\", \"Mean\", \"SD\", \"Median\", \"Skewness\")\nnames(tab1) = labs\n\ntab1 %&gt;%\n  as_hux()\n\n\n\n\nTable 4.1: Descriptive statistics of height.\n\n\n\nMean\nSD\nMedian\nSkewness\n\n\nHeight (cm)\n177.24\n6.42\n177.80\n-0.20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nConstruct a histogram with a normal density plot and a QQ-plot for the variable height from the wcgs dataset.\n\n\n\n\nCode\np1 = wcgs %&gt;%\n  hist_norm(~ height, title = \"(a)\") %&gt;%\n  axis_labs()\n\np2 = wcgs %&gt;%\n  qq_plot(~ height, title = \"(b)\") %&gt;%\n  axis_labs()\n\nautoplot(list(p1, p2))\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat are your conclusions?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nHeight in males follows a normal distribution.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nIs DBP normally distributed in the subset of males who did not have a CHD event in the wcgs dataset? Construct a table of the following statistics: mean, standard deviation, median, and skewness for the variable dbp from the wcgs dataset.\n\n\n\n\nCode\ntab2 = wcgs %&gt;%\n  descr(dbp) %&gt;%\n  select(label, mean, sd, md, skew)\n\nnames(tab2) = labs\n\ntab2 %&gt;%\n  as_hux()\n\n\n\n\nTable 4.2: Descriptive statistics of diastolic blood pressure.\n\n\n\nMean\nSD\nMedian\nSkewness\n\n\nDBP (mm Hg)\n82.02\n9.73\n80.00\n0.93\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nConstruct a histogram with a normal density plot and a QQ-plot for the variable dbp from the wcgs dataset.\n\n\n\n\nCode\np1 = wcgs %&gt;%\n  filter(chd == \"No CHD\") %&gt;%\n  hist_norm(~ dbp, title = \"(a)\") %&gt;%\n  axis_labs()\n\np2 = wcgs %&gt;%\n  filter(chd == \"No CHD\") %&gt;%\n  qq_plot(~ dbp, title = \"(b)\") %&gt;%\n  axis_labs()\n\nautoplot(list(p1, p2))\n\n\n\n\n\n\n\n4.2.2 Log-normal distribution\n\n\n\n\n\n\nExercise:\n\n\n\nConstruct a table of the following statistics: mean, standard deviation, median and skewness for the variable IgM from the serum dataset.\n\n\n\n\nCode\ntab3 = serum %&gt;%\n  descr(IgM) %&gt;%\n  select(label, mean, sd, md, skew)\n\nnames(tab3) = labs\n\ntab3 %&gt;%\n  as_hux()\n\n\n\n\nTable 4.3: Descriptive statistics of serum IgM.\n\n\n\nMean\nSD\nMedian\nSkewness\n\n\nIgM\n0.80\n0.47\n0.70\n2.57\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nConstruct a histogram with a normal density plot and a QQ-plot for the variable IgM.\n\n\n\n\nCode\np1 = serum %&gt;%\n  hist_norm(~ IgM, title = \"(a)\",\n          xlab = \"IgM (mg/ml)\")\n\np2 = serum %&gt;%\n  qq_plot(~ IgM, title = \"(b)\",\n          ylab = \"IgM (mg/ml)\")\n\nautoplot(list(p1, p2))\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat are your conclusions?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nIgM is not normally distributed as it has a positive skew. The QQ-plot shows deviations from normality and shows a J-shape.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nConstruct a histogram with a normal density plot and a QQ-plot for log-transformed version of IgM. (tip: use ~ log(IgM) in your formula).\n\n\n\n\nCode\np1 = serum %&gt;%\n  hist_norm(~ log(IgM), title = \"(a)\")\n\np2 = serum %&gt;%\n  qq_plot(~ log(IgM), title = \"(b)\")\n\nautoplot(list(p1, p2))\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat are your conclusions?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nWhen log-transformed, IgM follows a normal distribution."
  },
  {
    "objectID": "estimation.html#random-sampling",
    "href": "estimation.html#random-sampling",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.3 Random Sampling",
    "text": "4.3 Random Sampling\nWhen we take a sample, we calculate a statistic, an estimate of a parameter in the original population where the sample was initially taken.\nThis process, of statistical inference is reliable and robust if the process is not biased. One way to avoid bias is through random sampling. The function sample allows us to take random samples from variables.\nTo have the same results, we will set up a seed before the sampling\n\nset.seed(576)\n\nLook at the statistics from random samples with decreasing sample size.\n\nrbind(\n  wcgs %&gt;% estat(~ height),\n  wcgs %&gt;% slice_sample(n = 100) %&gt;% \n    copy_labels(wcgs) %&gt;% estat(~ height),\n  wcgs %&gt;% slice_sample(n = 50) %&gt;% \n    copy_labels(wcgs) %&gt;% estat(~ height),\n  wcgs %&gt;% slice_sample(n = 25) %&gt;% \n    copy_labels(wcgs) %&gt;% estat(~ height),\n  wcgs %&gt;% slice_sample(n = 10) %&gt;% \n    copy_labels(wcgs) %&gt;% estat(~ height)\n)\n\n                 N   Min.   Max.   Mean Median   SD   CV\n1 Height (cm) 3154 152.40 198.12 177.24 177.80 6.42 0.04\n2 Height (cm)  100 160.02 193.04 176.12 175.26 6.74 0.04\n3 Height (cm)   50 160.02 187.96 177.09 177.80 6.18 0.03\n4 Height (cm)   25 165.10 193.04 178.21 180.34 7.06 0.04\n5 Height (cm)   10 170.18 185.42 179.32 179.07 5.11 0.03\n\n\nSo, even with a sample size as small as \\(n = 25\\), the statistics are still a good estimate of the original values in the population.\nHeight is a continues variable that follows a normal distribution, what is the case for categorical variables?\n\nwcgs %&gt;% freq_table(chd)\n\n# A tibble: 2 × 3\n  chd        n  prop\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD  2897  91.9\n2 CHD      257   8.1\n\nwcgs %&gt;% slice_sample(n = 100) %&gt;% freq_table(chd)\n\n# A tibble: 2 × 3\n  chd        n  prop\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD    88    88\n2 CHD       12    12\n\nwcgs %&gt;% slice_sample(n = 50) %&gt;% freq_table(chd)\n\n# A tibble: 2 × 3\n  chd        n  prop\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD    48    96\n2 CHD        2     4\n\nwcgs %&gt;% slice_sample(n = 25) %&gt;% freq_table(chd)\n\n# A tibble: 2 × 3\n  chd        n  prop\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD    24    96\n2 CHD        1     4\n\nwcgs %&gt;% slice_sample(n = 10) %&gt;% freq_table(chd)\n\n# A tibble: 2 × 3\n  chd        n  prop\n  &lt;fct&gt;  &lt;int&gt; &lt;dbl&gt;\n1 No CHD     9    90\n2 CHD        1    10"
  },
  {
    "objectID": "estimation.html#confidence-intervals",
    "href": "estimation.html#confidence-intervals",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.4 Confidence Intervals",
    "text": "4.4 Confidence Intervals\nReference range and confidence intervals are not the same.\n\nThe reference range is about the limits that would contain 95% of the observations in a sample or population.\nThe confidence interval is about the limits that would contain a given proportion (most of the times, 95%; sometimes, 99%) of the true value of a given parameter (e.g., the mean) in a population.\n\nFor the calculation of the reference range, we used about two standard deviations (\\(\\sim\\) 1.96) around the mean (as we assumed a normal distribution). For the confidence interval, we use about two standard errors around the mean."
  },
  {
    "objectID": "estimation.html#t-distribution",
    "href": "estimation.html#t-distribution",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.5 \\(t\\)-distribution",
    "text": "4.5 \\(t\\)-distribution\nThe \\(t\\)-distribution is also bell shaped, but with a heavier tail. It has one more parameter than the normal distribution: the degrees of freedom (df). For our current example:\n\\[df = n-1\\]\nwhere \\(n\\) is the sample size. As the sample size increases, the \\(t\\)-distribution is almost the same as the normal distribution (for \\(n&gt;30\\)).\nFor illustration purposes, let’s take a look at the density plot of a \\(t\\)-distribution.\n\ngf_dist(\"t\", df = 5)\n\n\n\n\nIn the next lab, we will learn about hypothesis testing. In R every time we do hypothesis testing, a confidence interval is also shown.\nA calculation of the 95% CI for continuous variables can be estimated with the argument detailed = TRUE in t_test. For example, for height the CI is:\n\nwcgs %&gt;% \n  t_test(height ~ 1, detailed = TRUE) %&gt;% \n  as.data.frame()\n\n  estimate    .y. group1     group2    n statistic p   df conf.low conf.high\n1 177.2355 height      1 null model 3154  1549.714 0 3153 177.0112  177.4597\n  method alternative\n1 T-test   two.sided\n\n\nWe can also use the function ci from epiDisplay:\n\nwcgs %$% ci(height)\n\n    n     mean       sd        se lower95ci upper95ci\n 3154 177.2355 6.422881 0.1143666  177.0112  177.4597\n\n\n\n4.5.1 Introduction to Bootstrap\nThe advantage of bootstrap is that we can generate a big number of means (most of the times in the order of thousand or ten thousand) even from small samples, to estimate a narrower CI (as our sample of means is greater than the number of observations in our original sample).\nThe function bst from the pubh package allows us to estimate CI around the mean.\n\nwcgs %$% bst(height)\n\n stat estimate %CI  lower  upper\n mean   177.24  95 177.03 177.46\n\n\nAs an example, the 99% bootstrap CI for the mean value of height, using ten thousand replicates, would be:\n\nwcgs %$% bst(height, n = 1e4, CI = 99)\n\n stat estimate %CI  lower  upper\n mean   177.24  99 176.93 177.54\n\n\n\n\n4.5.2 Confidence intervals for proportions\nA calculation of the 95% CI for binomial variables can be estimated with the function ci. For example, for chd the CI is:\n\nwcgs %$% ci(chd) %&gt;% round(3)\n\n events total probability    se exact.lower95ci exact.upper95ci\n    257  3154       0.081 0.005           0.072           0.092\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is your interpretation?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\nThe prevalence of coronary heart disease in the population of males where the WCGS was sampled was: 8.1% (95% CI: 7.2, 9.2%)."
  },
  {
    "objectID": "estimation.html#sample-size",
    "href": "estimation.html#sample-size",
    "title": "4  Introduction to Inferential Statistics",
    "section": "4.6 Sample Size",
    "text": "4.6 Sample Size\nWe will not need a data set for this section. The command for power and sample size for means is power.t.test from the stats library. For proportions, the command is n.for.2p from the epiDisplay library.\n\n4.6.1 One-sample mean\n\n\n\n\n\n\nExample\n\n\n\nConsider a study of the effect of a calcium channel blocking agent on heart rate for patients with unstable angina. Suppose we want to have at least 80% power for detecting a significant difference if the smallest clinically interesting effect of the drug is to change mean heart rate by five beats per minute (bpm) over 48 hours. Assume that the standard deviation for changes in bpm over 48 hours is ten bpm. How many patients should be enrolled in such a study? This is a one-sample test (paired \\(t\\)-test on a change in heart rate).\n\n\n\npower.t.test(delta = 5, sd = 10, sig.level = 0.05, \n             power = 0.80, type = \"one.sample\")\n\n\n     One-sample t test power calculation \n\n              n = 33.3672\n          delta = 5\n             sd = 10\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\n\n\n\n\n\n\n\nExample\n\n\n\nWe wish to test the effects of a low-fat diet on serum cholesterol levels. We will measure the difference in cholesterol level for each subject before and after being on a diet. We will consider a reduction in 10 mg/dl as significant. We wish to have a power of 0.80 with a \\(\\sigma\\) = 0.05. From previous studies, we know that the standard deviation of the difference in cholesterol would be about 50 mg/dl.\n\n\n\npower.t.test(delta = 10, sd = 50, sig.level = 0.05, \n             power = 0.80, type = \"one.sample\")\n\n\n     One-sample t test power calculation \n\n              n = 198.1513\n          delta = 10\n             sd = 50\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\n\n\n\n4.6.2 Two-sample means\n\n\n\n\n\n\nExample\n\n\n\nSuppose that instead of a single group design, they had a control group also, and the researches would like to compare the cholesterol levels at two months post-intervention. If they assume equal variances, what is the estimated sample size then?\n\n\n\npower.t.test(delta = 10, sd = 50, sig.level = 0.05, \n             power = 0.80)\n\n\n     Two-sample t test power calculation \n\n              n = 393.4067\n          delta = 10\n             sd = 50\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\nNOTE: n is number in *each* group\n\n\nWhen comparing two means, we can also use n.for.2means which has the advantage of allowing different values of standard deviations for each sample (not the case in our current example).\n\nlibrary(epiDisplay)\nn.for.2means(mu1 = 0, mu2 = 10, sd1 = 50, sd2 = 50)\n\n\nEstimation of sample size for testing Ho: mu1==mu2 \nAssumptions: \n \n     alpha = 0.05 \n     power = 0.8 \n     n2/n1 = 1 \n       mu1 = 0 \n       mu2 = 10 \n       sd1 = 50 \n       sd2 = 50 \n \nEstimated required sample size: \n \n        n1 = 393 \n        n2 = 393 \n   n1 + n2 = 786 \n \n\n\nIt is often the case that we have a limited sample size, due to the availability of participants or due to time or funding.\n\n\n\n\n\n\nExample\n\n\n\nSuppose you would like to test the effects of caffeine on time to exhaustion in trained cyclists, 10% below their anaerobic threshold. You believe that a difference of 1 minute is meaningful, and you have 12 willing participants whom you will randomise to placebo or caffeine. From a review of the literature, it appears that a reasonable estimate for the standard deviation is 1.5 minutes. What is the power of this study, assuming a two-sided test using \\(\\sigma\\) = 0.05?\n\n\n\npower.t.test(delta = 1, sd = 1.5, sig.level = 0.05, n = 6)\n\n\n     Two-sample t test power calculation \n\n              n = 6\n          delta = 1\n             sd = 1.5\n      sig.level = 0.05\n          power = 0.1805033\n    alternative = two.sided\n\nNOTE: n is number in *each* group\n\n\nWhat should you do? How big would your sample size have to be to have 80% power?\n\npower.t.test(delta = 1, sd = 1.5, sig.level = 0.05, power = 0.8)\n\n\n     Two-sample t test power calculation \n\n              n = 36.3058\n          delta = 1\n             sd = 1.5\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\nNOTE: n is number in *each* group\n\n\n\n\n4.6.3 Two-sample proportions\n\n\n\n\n\n\nExample\n\n\n\nA scientist wants to compare rates of prematurity in infants born to women who attend prenatal clinics (\\(p_1\\) = 0.25) with non-attenders (\\(p_2\\) = 0.40). Because recruitment of non-attenders is difficult, the scientist decides to study half as many non-attenders (ratio = 2). Find \\(n_1\\) and \\(n_2\\) to ensure \\(\\sigma\\) = 0.01 and 95% power.\n\n\n\nn.for.2p(p1 = 0.25, p2 = 0.4, alpha = 0.01, power = 0.95, ratio = 0.5)\n\n\nEstimation of sample size for testing Ho: p1==p2 \nAssumptions: \n \n     alpha = 0.01 \n     power = 0.95 \n        p1 = 0.25 \n        p2 = 0.4 \n     n2/n1 = 0.5 \n \nEstimated required sample size: \n \n        n1 = 531 \n        n2 = 265 \n   n1 + n2 = 796 \n \n\n\n\n\n\n\n\n\nExample\n\n\n\nA cohort study of smoking and coronary heart disease (CHD) in middle-aged men is planned. A sample of men will be selected at random from the population and will be asked to complete a questionnaire. The follow-up period will be five years. The investigators would like to be 0.90 sure of being able to detect when the risk ratio of CHD is 1.4 for smokers, using a 0.05 significance test. Previous evidence suggests that the death rate in non-smokers is 413 per 100000 per year. Assuming equal numbers of smokers and non-smokers are sampled, how many should be sampled overall?\n\n\n\nn.for.2p(p1 = 5 * 413/1e5, p2 = 1.4 * 5 * 413/1e5, power = 0.9)\n\n\nEstimation of sample size for testing Ho: p1==p2 \nAssumptions: \n \n     alpha = 0.05 \n     power = 0.9 \n        p1 = 0.02065 \n        p2 = 0.02891 \n     n2/n1 = 1 \n \nEstimated required sample size: \n \n        n1 = 7682 \n        n2 = 7682 \n   n1 + n2 = 15364 \n \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe proportion of the control group (non-smokers) is: (5 \\(\\times\\) 413/100000) whereas the proportion for the exposed group (smokers) is 1.4 times greater.\n\n\n\n\n\n\n\n\nExample\n\n\n\nA case-control study of the relationship between smoking and CHD is planned. A sample of men with newly diagnosed CHD will be compared for smoking status with a sample of controls. Assuming an equal number of cases and controls, how many are needed to detect an approximate odds ratio of 2.0 with 0.90 power using a two-sided 0.05 test? Previous surveys indicate that 0.30 of the male population are smokers.\n\n\n\nprop_or(p2 = 0.3, or = 2)\n\n[1] 0.4615385\n\n\nIn other words, in the healthy, control group we have 30% of smokers, and we expect a 46% of smokers in the CHD group to achieve, at least, an OR = 2.\n\nn.for.2p(p1 = 0.3, p2 = prop_or(p2 = 0.3, or = 2), power = 0.9)\n\n\nEstimation of sample size for testing Ho: p1==p2 \nAssumptions: \n \n     alpha = 0.05 \n     power = 0.9 \n        p1 = 0.3 \n        p2 = 0.4615385 \n     n2/n1 = 1 \n \nEstimated required sample size: \n \n        n1 = 200 \n        n2 = 200 \n   n1 + n2 = 400"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Athens, J. (2020), pubh: A\nToolbox for Public Health and Epidemiology.\n\n\nDalgaard, P. (2008), Introductory statistics with r, Springer.\n\n\nR Core Team (2020), R: A\nlanguage and environment for statistical computing, Vienna,\nAustria: R Foundation for Statistical Computing."
  }
]