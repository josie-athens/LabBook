{
  "hash": "9b410d4e4a2ea9869b1ff0f4d5edd087",
  "result": {
    "markdown": "# Preface {.unnumbered}\n\n## R Syntax\n\nEntering your statistical analyses and data manipulations using syntax might initially be daunting. However, there are some major advantages of this approach over *pointing and clicking*. Creating a syntax file to perform your analyses will enable you to:\n\n- Automatically document exactly how you performed an analysis, including exactly which data set was used.\n- Easily reproduce an analysis.\n- Easily repeat an analysis with minor changes or on a modified data set.\n- Run a time-consuming series of analyses while you are away from your computer.\n- Use copy and paste to create templates and/or macros to assist with performing repetitive analyses.\n- Use your code to unambiguously explain your analysis to someone (such as a statistician).\n- Perform your analyses more quickly as typing (once you know what to type) is usually faster than using menus or combo boxes.\n- Backup your analysis using a small text file.\n\nInitially, we will use syntax in an interactive fashion. In other words, we will enter a command directly into `R`, examine the results, and then enter the next command. Later, we will look at storing these commands in a single file that can be run in one action (a script `.R` file).\n\nIt is worth noting at the outset that `R` is case-sensitive. This means that `Anova` and `anova` are different commands. Variable names can use both lower and upper case, but `AGE`, `age`, and `Age` are three different variables. To minimise the possibility of confusion, using only lower case for variable names is recommended, although some people capitalise subsequent words (e.g., `ChildAge`).\n\n## Additional sources of information\n\nThe on-line help that comes with `R` contains a lot of useful information, especially for syntax. If you cannot recall the particular syntax needed, you can use the dialogue boxes and examine the syntax that `R` includes in the `Results Window`. There are also many `R` tutorials on the Internet and some useful books in the Science Library.\n\nThe [Quick-R](http://www.statmethods.net/index.html) web page, is a good and brief introduction to `R`. \n\n## Installing R\n\nA brief introduction to `R` and visual instructions on how to install it can be found on the following  [YouTube](https://www.youtube.com/watch?v=Uenf8DbOjz0) video.\n\nThe following instructions are given to install `R` on your own computer.\n\n> **Note:** Labs assume you have **R version 4.0.3** installed.\n\n### Instructions for Windows\n\n1. Go to the [CRAN](https://cran.r-project.org/) webpage [@cran].\n2. Select *Download R for Windows*.\n3. Click on *install R for the first time* and follow the instructions.\n4. Install `R` as any other program. You don't need a short cut to R.\n5. When installing, select the 64 bit option (unless your computer is an old 32 bit one).\n6. Download and install **RStudio Free Desktop version** from:  [RStudio](https://rstudio.com/products/rstudio/download/).\n\n### Instructions for Macintosh\n\n1. Go to the [CRAN](https://cran.r-project.org/) webpage.\n2. Select *Download R for (Mac) OS X*. \n3. Download the last *binary* version of `R`.\n4. Follow the link to download [XQuartz](https://www.xquartz.org/).\n5. Download and install **RStudio Free Desktop version** from:  [RStudio](https://rstudio.com/products/rstudio/download/).\n6. Install all the packages that you downloaded.\n7. Open `RStudio` and go to *Tools > Terminal > New Terminal*.\n8. Select the tab for *Terminal* on the left bottom panel of `RStudio`.\n9. Type: `xcode-select --install` in the terminal and click the *Return* or *Enter* Key.\n10. Close the terminal.\n\n\n### Installing extra packages\n\nWe need to install extra packages that add additional commands to `R` [@cran], one of them, `pubh` [@pubh] is essential for both PUBH725 and PUBH726. Open `RStudio` and copy the following commands in the *Console* panel.\n\n> **Note:** Labs assume you have **`R` version 4.1.1** or later and **`pubh` version 1.2.5** or later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"easystats\", repos = \"https://easystats.r-universe.dev\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"bestglm\", \"bookdown\", \"broom.mixed\", \"epiDisplay\",\n                   \"forecast\", \"ftExtra\", \"GGally\", \"ggeffects\",\n                   \"ggfortify\",  \"ggpubr\", \"ggraph\",  \"ggsci\", \"heatmaply\", \n                   \"import\", \"ISwR\", \"jtools\", \"latex2exp\", \"plotly\", \n                   \"pubh\", \"psych\", \"qqplotr\", \"reshape2\", \"rmarkdown\", \n                   \"rms\", \"rstatix\", \"sjlabelled\", \"sjPlot\", \"sjmisc\", \n                   \"scales\", \"season\", \"sparkline\",  \"tidyverse\", \"vcd\"))\n```\n:::\n\n\n## Setting up RStudio\n\nThe first thing you would like to do, is to organise all your documents on a single *directory* (*folder*). For better results, please follow these instructions:\n\n1. Create a new directory in your computer, within your **Documents** directory and name it **PUBH725**.\n2. Create a sub directory within your new directory, **PUBH725** and name it **data**.\n3. Create a sub directory within your new directory, **PUBH725** and name it **figures**.\n4. Open `RStudio` and go to `File > New Project`. Select **Existing Directory** (see Figure \\@ref(fig:NewProject)).\n5. Browse for the directory **PUBH725** in your computer and select **Create Project**.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in include_graphics(\"figures/NewProject.png\", 3): could not find function \"include_graphics\"\n```\n:::\n:::\n\n\nThere are several functions contained on packages; these packages have to be loaded for each new **session** or **script**. We are going to learn how to load these packages in the first lab.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}